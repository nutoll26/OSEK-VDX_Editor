/**
 * generated by Xtext 2.10.0
 */
package org.xtext.example.oil.oil;


/**
 * <!-- begin-user-doc -->
 * A representation of the model object '<em><b>Impl Attr Int Def</b></em>'.
 * <!-- end-user-doc -->
 *
 * <p>
 * The following features are supported:
 * <ul>
 *   <li>{@link org.xtext.example.oil.oil.ImplAttrIntDef#getType <em>Type</em>}</li>
 *   <li>{@link org.xtext.example.oil.oil.ImplAttrIntDef#getRange <em>Range</em>}</li>
 *   <li>{@link org.xtext.example.oil.oil.ImplAttrIntDef#getName <em>Name</em>}</li>
 *   <li>{@link org.xtext.example.oil.oil.ImplAttrIntDef#isMultiple <em>Multiple</em>}</li>
 *   <li>{@link org.xtext.example.oil.oil.ImplAttrIntDef#getValue <em>Value</em>}</li>
 *   <li>{@link org.xtext.example.oil.oil.ImplAttrIntDef#getDefault <em>Default</em>}</li>
 *   <li>{@link org.xtext.example.oil.oil.ImplAttrIntDef#getDescription <em>Description</em>}</li>
 * </ul>
 * </p>
 *
 * @see org.xtext.example.oil.oil.OilPackage#getImplAttrIntDef()
 * @model
 * @generated
 */
public interface ImplAttrIntDef extends ImplAttrDef
{
  /**
   * Returns the value of the '<em><b>Type</b></em>' attribute.
   * The literals are from the enumeration {@link org.xtext.example.oil.oil.IntTypeEnum}.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Type</em>' attribute isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Type</em>' attribute.
   * @see org.xtext.example.oil.oil.IntTypeEnum
   * @see #setType(IntTypeEnum)
   * @see org.xtext.example.oil.oil.OilPackage#getImplAttrIntDef_Type()
   * @model
   * @generated
   */
  IntTypeEnum getType();

  /**
   * Sets the value of the '{@link org.xtext.example.oil.oil.ImplAttrIntDef#getType <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Type</em>' attribute.
   * @see org.xtext.example.oil.oil.IntTypeEnum
   * @see #getType()
   * @generated
   */
  void setType(IntTypeEnum value);

  /**
   * Returns the value of the '<em><b>Range</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Range</em>' containment reference isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Range</em>' containment reference.
   * @see #setRange(Range)
   * @see org.xtext.example.oil.oil.OilPackage#getImplAttrIntDef_Range()
   * @model containment="true"
   * @generated
   */
  Range getRange();

  /**
   * Sets the value of the '{@link org.xtext.example.oil.oil.ImplAttrIntDef#getRange <em>Range</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Range</em>' containment reference.
   * @see #getRange()
   * @generated
   */
  void setRange(Range value);

  /**
   * Returns the value of the '<em><b>Name</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Name</em>' containment reference isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Name</em>' containment reference.
   * @see #setName(AttributeName)
   * @see org.xtext.example.oil.oil.OilPackage#getImplAttrIntDef_Name()
   * @model containment="true"
   * @generated
   */
  AttributeName getName();

  /**
   * Sets the value of the '{@link org.xtext.example.oil.oil.ImplAttrIntDef#getName <em>Name</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Name</em>' containment reference.
   * @see #getName()
   * @generated
   */
  void setName(AttributeName value);

  /**
   * Returns the value of the '<em><b>Multiple</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Multiple</em>' attribute isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Multiple</em>' attribute.
   * @see #setMultiple(boolean)
   * @see org.xtext.example.oil.oil.OilPackage#getImplAttrIntDef_Multiple()
   * @model
   * @generated
   */
  boolean isMultiple();

  /**
   * Sets the value of the '{@link org.xtext.example.oil.oil.ImplAttrIntDef#isMultiple <em>Multiple</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Multiple</em>' attribute.
   * @see #isMultiple()
   * @generated
   */
  void setMultiple(boolean value);

  /**
   * Returns the value of the '<em><b>Value</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Value</em>' attribute isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Value</em>' attribute.
   * @see #setValue(int)
   * @see org.xtext.example.oil.oil.OilPackage#getImplAttrIntDef_Value()
   * @model
   * @generated
   */
  int getValue();

  /**
   * Sets the value of the '{@link org.xtext.example.oil.oil.ImplAttrIntDef#getValue <em>Value</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Value</em>' attribute.
   * @see #getValue()
   * @generated
   */
  void setValue(int value);

  /**
   * Returns the value of the '<em><b>Default</b></em>' attribute.
   * The literals are from the enumeration {@link org.xtext.example.oil.oil.DefaultEnum}.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Default</em>' attribute isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Default</em>' attribute.
   * @see org.xtext.example.oil.oil.DefaultEnum
   * @see #setDefault(DefaultEnum)
   * @see org.xtext.example.oil.oil.OilPackage#getImplAttrIntDef_Default()
   * @model
   * @generated
   */
  DefaultEnum getDefault();

  /**
   * Sets the value of the '{@link org.xtext.example.oil.oil.ImplAttrIntDef#getDefault <em>Default</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Default</em>' attribute.
   * @see org.xtext.example.oil.oil.DefaultEnum
   * @see #getDefault()
   * @generated
   */
  void setDefault(DefaultEnum value);

  /**
   * Returns the value of the '<em><b>Description</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Description</em>' attribute isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Description</em>' attribute.
   * @see #setDescription(String)
   * @see org.xtext.example.oil.oil.OilPackage#getImplAttrIntDef_Description()
   * @model
   * @generated
   */
  String getDescription();

  /**
   * Sets the value of the '{@link org.xtext.example.oil.oil.ImplAttrIntDef#getDescription <em>Description</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Description</em>' attribute.
   * @see #getDescription()
   * @generated
   */
  void setDescription(String value);

} // ImplAttrIntDef
