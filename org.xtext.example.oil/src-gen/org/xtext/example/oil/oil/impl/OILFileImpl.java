/**
 * generated by Xtext 2.10.0
 */
package org.xtext.example.oil.oil.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.oil.oil.ApplicationDefinition;
import org.xtext.example.oil.oil.ImplementationDefinition;
import org.xtext.example.oil.oil.Include;
import org.xtext.example.oil.oil.OILFile;
import org.xtext.example.oil.oil.OILVersion;
import org.xtext.example.oil.oil.OilPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>OIL File</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@link org.xtext.example.oil.oil.impl.OILFileImpl#getVersion <em>Version</em>}</li>
 *   <li>{@link org.xtext.example.oil.oil.impl.OILFileImpl#getInclude <em>Include</em>}</li>
 *   <li>{@link org.xtext.example.oil.oil.impl.OILFileImpl#getImplementation <em>Implementation</em>}</li>
 *   <li>{@link org.xtext.example.oil.oil.impl.OILFileImpl#getApplication <em>Application</em>}</li>
 * </ul>
 * </p>
 *
 * @generated
 */
public class OILFileImpl extends MinimalEObjectImpl.Container implements OILFile
{
  /**
   * The cached value of the '{@link #getVersion() <em>Version</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVersion()
   * @generated
   * @ordered
   */
  protected OILVersion version;

  /**
   * The cached value of the '{@link #getInclude() <em>Include</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInclude()
   * @generated
   * @ordered
   */
  protected EList<Include> include;

  /**
   * The cached value of the '{@link #getImplementation() <em>Implementation</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getImplementation()
   * @generated
   * @ordered
   */
  protected ImplementationDefinition implementation;

  /**
   * The cached value of the '{@link #getApplication() <em>Application</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getApplication()
   * @generated
   * @ordered
   */
  protected ApplicationDefinition application;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected OILFileImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return OilPackage.eINSTANCE.getOILFile();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OILVersion getVersion()
  {
    return version;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetVersion(OILVersion newVersion, NotificationChain msgs)
  {
    OILVersion oldVersion = version;
    version = newVersion;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, OilPackage.OIL_FILE__VERSION, oldVersion, newVersion);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setVersion(OILVersion newVersion)
  {
    if (newVersion != version)
    {
      NotificationChain msgs = null;
      if (version != null)
        msgs = ((InternalEObject)version).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - OilPackage.OIL_FILE__VERSION, null, msgs);
      if (newVersion != null)
        msgs = ((InternalEObject)newVersion).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - OilPackage.OIL_FILE__VERSION, null, msgs);
      msgs = basicSetVersion(newVersion, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OilPackage.OIL_FILE__VERSION, newVersion, newVersion));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Include> getInclude()
  {
    if (include == null)
    {
      include = new EObjectContainmentEList<Include>(Include.class, this, OilPackage.OIL_FILE__INCLUDE);
    }
    return include;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ImplementationDefinition getImplementation()
  {
    return implementation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetImplementation(ImplementationDefinition newImplementation, NotificationChain msgs)
  {
    ImplementationDefinition oldImplementation = implementation;
    implementation = newImplementation;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, OilPackage.OIL_FILE__IMPLEMENTATION, oldImplementation, newImplementation);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setImplementation(ImplementationDefinition newImplementation)
  {
    if (newImplementation != implementation)
    {
      NotificationChain msgs = null;
      if (implementation != null)
        msgs = ((InternalEObject)implementation).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - OilPackage.OIL_FILE__IMPLEMENTATION, null, msgs);
      if (newImplementation != null)
        msgs = ((InternalEObject)newImplementation).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - OilPackage.OIL_FILE__IMPLEMENTATION, null, msgs);
      msgs = basicSetImplementation(newImplementation, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OilPackage.OIL_FILE__IMPLEMENTATION, newImplementation, newImplementation));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ApplicationDefinition getApplication()
  {
    return application;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetApplication(ApplicationDefinition newApplication, NotificationChain msgs)
  {
    ApplicationDefinition oldApplication = application;
    application = newApplication;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, OilPackage.OIL_FILE__APPLICATION, oldApplication, newApplication);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setApplication(ApplicationDefinition newApplication)
  {
    if (newApplication != application)
    {
      NotificationChain msgs = null;
      if (application != null)
        msgs = ((InternalEObject)application).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - OilPackage.OIL_FILE__APPLICATION, null, msgs);
      if (newApplication != null)
        msgs = ((InternalEObject)newApplication).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - OilPackage.OIL_FILE__APPLICATION, null, msgs);
      msgs = basicSetApplication(newApplication, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OilPackage.OIL_FILE__APPLICATION, newApplication, newApplication));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case OilPackage.OIL_FILE__VERSION:
        return basicSetVersion(null, msgs);
      case OilPackage.OIL_FILE__INCLUDE:
        return ((InternalEList<?>)getInclude()).basicRemove(otherEnd, msgs);
      case OilPackage.OIL_FILE__IMPLEMENTATION:
        return basicSetImplementation(null, msgs);
      case OilPackage.OIL_FILE__APPLICATION:
        return basicSetApplication(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case OilPackage.OIL_FILE__VERSION:
        return getVersion();
      case OilPackage.OIL_FILE__INCLUDE:
        return getInclude();
      case OilPackage.OIL_FILE__IMPLEMENTATION:
        return getImplementation();
      case OilPackage.OIL_FILE__APPLICATION:
        return getApplication();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case OilPackage.OIL_FILE__VERSION:
        setVersion((OILVersion)newValue);
        return;
      case OilPackage.OIL_FILE__INCLUDE:
        getInclude().clear();
        getInclude().addAll((Collection<? extends Include>)newValue);
        return;
      case OilPackage.OIL_FILE__IMPLEMENTATION:
        setImplementation((ImplementationDefinition)newValue);
        return;
      case OilPackage.OIL_FILE__APPLICATION:
        setApplication((ApplicationDefinition)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case OilPackage.OIL_FILE__VERSION:
        setVersion((OILVersion)null);
        return;
      case OilPackage.OIL_FILE__INCLUDE:
        getInclude().clear();
        return;
      case OilPackage.OIL_FILE__IMPLEMENTATION:
        setImplementation((ImplementationDefinition)null);
        return;
      case OilPackage.OIL_FILE__APPLICATION:
        setApplication((ApplicationDefinition)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case OilPackage.OIL_FILE__VERSION:
        return version != null;
      case OilPackage.OIL_FILE__INCLUDE:
        return include != null && !include.isEmpty();
      case OilPackage.OIL_FILE__IMPLEMENTATION:
        return implementation != null;
      case OilPackage.OIL_FILE__APPLICATION:
        return application != null;
    }
    return super.eIsSet(featureID);
  }

} //OILFileImpl
