/**
 * generated by Xtext 2.10.0
 */
package org.xtext.example.oil.oil.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.oil.oil.ImpCounterRule;
import org.xtext.example.oil.oil.ImpOsRule;
import org.xtext.example.oil.oil.ImpTaskRule;
import org.xtext.example.oil.oil.ImplementationSpec;
import org.xtext.example.oil.oil.IsrRule;
import org.xtext.example.oil.oil.OilPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Implementation Spec</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@link org.xtext.example.oil.oil.impl.ImplementationSpecImpl#getOsRule <em>Os Rule</em>}</li>
 *   <li>{@link org.xtext.example.oil.oil.impl.ImplementationSpecImpl#getCounterRule <em>Counter Rule</em>}</li>
 *   <li>{@link org.xtext.example.oil.oil.impl.ImplementationSpecImpl#getIsrRule <em>Isr Rule</em>}</li>
 *   <li>{@link org.xtext.example.oil.oil.impl.ImplementationSpecImpl#getTaskRule <em>Task Rule</em>}</li>
 * </ul>
 * </p>
 *
 * @generated
 */
public class ImplementationSpecImpl extends MinimalEObjectImpl.Container implements ImplementationSpec
{
  /**
   * The cached value of the '{@link #getOsRule() <em>Os Rule</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOsRule()
   * @generated
   * @ordered
   */
  protected EList<ImpOsRule> osRule;

  /**
   * The cached value of the '{@link #getCounterRule() <em>Counter Rule</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCounterRule()
   * @generated
   * @ordered
   */
  protected EList<ImpCounterRule> counterRule;

  /**
   * The cached value of the '{@link #getIsrRule() <em>Isr Rule</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIsrRule()
   * @generated
   * @ordered
   */
  protected EList<IsrRule> isrRule;

  /**
   * The cached value of the '{@link #getTaskRule() <em>Task Rule</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTaskRule()
   * @generated
   * @ordered
   */
  protected EList<ImpTaskRule> taskRule;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ImplementationSpecImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return OilPackage.eINSTANCE.getImplementationSpec();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<ImpOsRule> getOsRule()
  {
    if (osRule == null)
    {
      osRule = new EObjectContainmentEList<ImpOsRule>(ImpOsRule.class, this, OilPackage.IMPLEMENTATION_SPEC__OS_RULE);
    }
    return osRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<ImpCounterRule> getCounterRule()
  {
    if (counterRule == null)
    {
      counterRule = new EObjectContainmentEList<ImpCounterRule>(ImpCounterRule.class, this, OilPackage.IMPLEMENTATION_SPEC__COUNTER_RULE);
    }
    return counterRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<IsrRule> getIsrRule()
  {
    if (isrRule == null)
    {
      isrRule = new EObjectContainmentEList<IsrRule>(IsrRule.class, this, OilPackage.IMPLEMENTATION_SPEC__ISR_RULE);
    }
    return isrRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<ImpTaskRule> getTaskRule()
  {
    if (taskRule == null)
    {
      taskRule = new EObjectContainmentEList<ImpTaskRule>(ImpTaskRule.class, this, OilPackage.IMPLEMENTATION_SPEC__TASK_RULE);
    }
    return taskRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case OilPackage.IMPLEMENTATION_SPEC__OS_RULE:
        return ((InternalEList<?>)getOsRule()).basicRemove(otherEnd, msgs);
      case OilPackage.IMPLEMENTATION_SPEC__COUNTER_RULE:
        return ((InternalEList<?>)getCounterRule()).basicRemove(otherEnd, msgs);
      case OilPackage.IMPLEMENTATION_SPEC__ISR_RULE:
        return ((InternalEList<?>)getIsrRule()).basicRemove(otherEnd, msgs);
      case OilPackage.IMPLEMENTATION_SPEC__TASK_RULE:
        return ((InternalEList<?>)getTaskRule()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case OilPackage.IMPLEMENTATION_SPEC__OS_RULE:
        return getOsRule();
      case OilPackage.IMPLEMENTATION_SPEC__COUNTER_RULE:
        return getCounterRule();
      case OilPackage.IMPLEMENTATION_SPEC__ISR_RULE:
        return getIsrRule();
      case OilPackage.IMPLEMENTATION_SPEC__TASK_RULE:
        return getTaskRule();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case OilPackage.IMPLEMENTATION_SPEC__OS_RULE:
        getOsRule().clear();
        getOsRule().addAll((Collection<? extends ImpOsRule>)newValue);
        return;
      case OilPackage.IMPLEMENTATION_SPEC__COUNTER_RULE:
        getCounterRule().clear();
        getCounterRule().addAll((Collection<? extends ImpCounterRule>)newValue);
        return;
      case OilPackage.IMPLEMENTATION_SPEC__ISR_RULE:
        getIsrRule().clear();
        getIsrRule().addAll((Collection<? extends IsrRule>)newValue);
        return;
      case OilPackage.IMPLEMENTATION_SPEC__TASK_RULE:
        getTaskRule().clear();
        getTaskRule().addAll((Collection<? extends ImpTaskRule>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case OilPackage.IMPLEMENTATION_SPEC__OS_RULE:
        getOsRule().clear();
        return;
      case OilPackage.IMPLEMENTATION_SPEC__COUNTER_RULE:
        getCounterRule().clear();
        return;
      case OilPackage.IMPLEMENTATION_SPEC__ISR_RULE:
        getIsrRule().clear();
        return;
      case OilPackage.IMPLEMENTATION_SPEC__TASK_RULE:
        getTaskRule().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case OilPackage.IMPLEMENTATION_SPEC__OS_RULE:
        return osRule != null && !osRule.isEmpty();
      case OilPackage.IMPLEMENTATION_SPEC__COUNTER_RULE:
        return counterRule != null && !counterRule.isEmpty();
      case OilPackage.IMPLEMENTATION_SPEC__ISR_RULE:
        return isrRule != null && !isrRule.isEmpty();
      case OilPackage.IMPLEMENTATION_SPEC__TASK_RULE:
        return taskRule != null && !taskRule.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //ImplementationSpecImpl
