/**
 * generated by Xtext 2.10.0
 */
package org.xtext.example.oil.oil.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.example.oil.oil.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class OilFactoryImpl extends EFactoryImpl implements OilFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static OilFactory init()
  {
    try
    {
      OilFactory theOilFactory = (OilFactory)EPackage.Registry.INSTANCE.getEFactory(OilPackage.eNS_URI);
      if (theOilFactory != null)
      {
        return theOilFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new OilFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OilFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case OilPackage.OIL_FILE: return createOILFile();
      case OilPackage.INCLUDE: return createInclude();
      case OilPackage.OIL_VERSION: return createOILVersion();
      case OilPackage.IMPLEMENTATION_DEFINITION: return createImplementationDefinition();
      case OilPackage.IMPLEMENTATION_SPEC: return createImplementationSpec();
      case OilPackage.IMPLEMENTATION_DEF: return createImplementationDef();
      case OilPackage.IMPL_ATTR_DEF: return createImplAttrDef();
      case OilPackage.IMPL_ATTR_INT_DEF: return createImplAttrIntDef();
      case OilPackage.IMPL_ATTR_IDENTI_FIER: return createImplAttrIdentiFier();
      case OilPackage.IMPL_ATTR_FLOAT_DEF: return createImplAttrFloatDef();
      case OilPackage.IMPL_ATTR_ENUM_DEF: return createImplAttrEnumDef();
      case OilPackage.IMPL_ATTR_STRING_DEF: return createImplAttrStringDef();
      case OilPackage.IMPL_ATTR_BOOLEAN_DEF: return createImplAttrBooleanDef();
      case OilPackage.RANGE: return createRange();
      case OilPackage.ENUMERATION: return createEnumeration();
      case OilPackage.ENUMERATOR: return createEnumerator();
      case OilPackage.IMPL_REF_DEF: return createImplRefDef();
      case OilPackage.APPLICATION_DEFINITION: return createApplicationDefinition();
      case OilPackage.OBJECT_DEFINITION: return createObjectDefinition();
      case OilPackage.RE_OBJECT_DEFINITION: return createReObjectDefinition();
      case OilPackage.ATTRIBUTE: return createAttribute();
      case OilPackage.ATTRIBUTE_NAME: return createAttributeName();
      case OilPackage.ATTRIBUTE_VALUE: return createAttributeValue();
      case OilPackage.NAME_ATTRIBUTE_VALUE: return createNameAttributeValue();
      case OilPackage.BOOLEAN_ATTRIBUTE_VALUE: return createBooleanAttributeValue();
      case OilPackage.NUMBER_ATTRIBUTE_VALUE: return createNumberAttributeValue();
      case OilPackage.FLOAT_ATTRIBUTE_VALUE: return createFloatAttributeValue();
      case OilPackage.STRING_ATTRIBUTE_VALUE: return createStringAttributeValue();
      case OilPackage.AUTO_ATTRIBUTE_VALUE: return createAutoAttributeValue();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case OilPackage.INT_TYPE_ENUM:
        return createIntTypeEnumFromString(eDataType, initialValue);
      case OilPackage.DEFAULT_ENUM:
        return createDefaultEnumFromString(eDataType, initialValue);
      case OilPackage.OBJECT_REF_TYPE_ENUM:
        return createObjectRefTypeEnumFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case OilPackage.INT_TYPE_ENUM:
        return convertIntTypeEnumToString(eDataType, instanceValue);
      case OilPackage.DEFAULT_ENUM:
        return convertDefaultEnumToString(eDataType, instanceValue);
      case OilPackage.OBJECT_REF_TYPE_ENUM:
        return convertObjectRefTypeEnumToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OILFile createOILFile()
  {
    OILFileImpl oilFile = new OILFileImpl();
    return oilFile;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Include createInclude()
  {
    IncludeImpl include = new IncludeImpl();
    return include;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OILVersion createOILVersion()
  {
    OILVersionImpl oilVersion = new OILVersionImpl();
    return oilVersion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ImplementationDefinition createImplementationDefinition()
  {
    ImplementationDefinitionImpl implementationDefinition = new ImplementationDefinitionImpl();
    return implementationDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ImplementationSpec createImplementationSpec()
  {
    ImplementationSpecImpl implementationSpec = new ImplementationSpecImpl();
    return implementationSpec;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ImplementationDef createImplementationDef()
  {
    ImplementationDefImpl implementationDef = new ImplementationDefImpl();
    return implementationDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ImplAttrDef createImplAttrDef()
  {
    ImplAttrDefImpl implAttrDef = new ImplAttrDefImpl();
    return implAttrDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ImplAttrIntDef createImplAttrIntDef()
  {
    ImplAttrIntDefImpl implAttrIntDef = new ImplAttrIntDefImpl();
    return implAttrIntDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ImplAttrIdentiFier createImplAttrIdentiFier()
  {
    ImplAttrIdentiFierImpl implAttrIdentiFier = new ImplAttrIdentiFierImpl();
    return implAttrIdentiFier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ImplAttrFloatDef createImplAttrFloatDef()
  {
    ImplAttrFloatDefImpl implAttrFloatDef = new ImplAttrFloatDefImpl();
    return implAttrFloatDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ImplAttrEnumDef createImplAttrEnumDef()
  {
    ImplAttrEnumDefImpl implAttrEnumDef = new ImplAttrEnumDefImpl();
    return implAttrEnumDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ImplAttrStringDef createImplAttrStringDef()
  {
    ImplAttrStringDefImpl implAttrStringDef = new ImplAttrStringDefImpl();
    return implAttrStringDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ImplAttrBooleanDef createImplAttrBooleanDef()
  {
    ImplAttrBooleanDefImpl implAttrBooleanDef = new ImplAttrBooleanDefImpl();
    return implAttrBooleanDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Range createRange()
  {
    RangeImpl range = new RangeImpl();
    return range;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Enumeration createEnumeration()
  {
    EnumerationImpl enumeration = new EnumerationImpl();
    return enumeration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Enumerator createEnumerator()
  {
    EnumeratorImpl enumerator = new EnumeratorImpl();
    return enumerator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ImplRefDef createImplRefDef()
  {
    ImplRefDefImpl implRefDef = new ImplRefDefImpl();
    return implRefDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ApplicationDefinition createApplicationDefinition()
  {
    ApplicationDefinitionImpl applicationDefinition = new ApplicationDefinitionImpl();
    return applicationDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ObjectDefinition createObjectDefinition()
  {
    ObjectDefinitionImpl objectDefinition = new ObjectDefinitionImpl();
    return objectDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ReObjectDefinition createReObjectDefinition()
  {
    ReObjectDefinitionImpl reObjectDefinition = new ReObjectDefinitionImpl();
    return reObjectDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Attribute createAttribute()
  {
    AttributeImpl attribute = new AttributeImpl();
    return attribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AttributeName createAttributeName()
  {
    AttributeNameImpl attributeName = new AttributeNameImpl();
    return attributeName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AttributeValue createAttributeValue()
  {
    AttributeValueImpl attributeValue = new AttributeValueImpl();
    return attributeValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NameAttributeValue createNameAttributeValue()
  {
    NameAttributeValueImpl nameAttributeValue = new NameAttributeValueImpl();
    return nameAttributeValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BooleanAttributeValue createBooleanAttributeValue()
  {
    BooleanAttributeValueImpl booleanAttributeValue = new BooleanAttributeValueImpl();
    return booleanAttributeValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NumberAttributeValue createNumberAttributeValue()
  {
    NumberAttributeValueImpl numberAttributeValue = new NumberAttributeValueImpl();
    return numberAttributeValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FloatAttributeValue createFloatAttributeValue()
  {
    FloatAttributeValueImpl floatAttributeValue = new FloatAttributeValueImpl();
    return floatAttributeValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StringAttributeValue createStringAttributeValue()
  {
    StringAttributeValueImpl stringAttributeValue = new StringAttributeValueImpl();
    return stringAttributeValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AutoAttributeValue createAutoAttributeValue()
  {
    AutoAttributeValueImpl autoAttributeValue = new AutoAttributeValueImpl();
    return autoAttributeValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IntTypeEnum createIntTypeEnumFromString(EDataType eDataType, String initialValue)
  {
    IntTypeEnum result = IntTypeEnum.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertIntTypeEnumToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DefaultEnum createDefaultEnumFromString(EDataType eDataType, String initialValue)
  {
    DefaultEnum result = DefaultEnum.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertDefaultEnumToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ObjectRefTypeEnum createObjectRefTypeEnumFromString(EDataType eDataType, String initialValue)
  {
    ObjectRefTypeEnum result = ObjectRefTypeEnum.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertObjectRefTypeEnumToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OilPackage getOilPackage()
  {
    return (OilPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static OilPackage getPackage()
  {
    return OilPackage.eINSTANCE;
  }

} //OilFactoryImpl
