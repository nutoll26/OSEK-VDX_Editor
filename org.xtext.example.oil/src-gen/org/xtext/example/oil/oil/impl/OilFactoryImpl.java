/**
 * generated by Xtext 2.10.0
 */
package org.xtext.example.oil.oil.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.example.oil.oil.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class OilFactoryImpl extends EFactoryImpl implements OilFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static OilFactory init()
  {
    try
    {
      OilFactory theOilFactory = (OilFactory)EPackage.Registry.INSTANCE.getEFactory(OilPackage.eNS_URI);
      if (theOilFactory != null)
      {
        return theOilFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new OilFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OilFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case OilPackage.OIL_FILE: return createOILFile();
      case OilPackage.INCLUDE: return createInclude();
      case OilPackage.OIL_VERSION: return createOILVersion();
      case OilPackage.IMPLEMENTATION_DEFINITION: return createImplementationDefinition();
      case OilPackage.IMPLEMENTATION_SPEC: return createImplementationSpec();
      case OilPackage.IMP_TASK_RULE: return createImpTaskRule();
      case OilPackage.IMP_TASK_PARAM: return createImpTaskParam();
      case OilPackage.IMP_OS_RULE: return createImpOsRule();
      case OilPackage.IMP_OS_PARAM: return createImpOsParam();
      case OilPackage.IMP_COUNTER_RULE: return createImpCounterRule();
      case OilPackage.IMP_COUNTER_PARAM: return createImpCounterParam();
      case OilPackage.APPLICATION_RULE: return createApplicationRule();
      case OilPackage.APP_SUB_CONTAINER: return createAppSubContainer();
      case OilPackage.APPLICATION_PARAM: return createApplicationParam();
      case OilPackage.HAS_RESTART_TASK_RULE: return createHasRestartTaskRule();
      case OilPackage.RESTART_TASK_RULE: return createRestartTaskRule();
      case OilPackage.TRUSTED_RULE: return createTrustedRule();
      case OilPackage.TRUSTED_FUC_RULE: return createTrustedFucRule();
      case OilPackage.ISR_RULE: return createIsrRule();
      case OilPackage.ISR_SUB_CONTAINER: return createIsrSubContainer();
      case OilPackage.TIMING_PROTECTION_RULE: return createTimingProtectionRule();
      case OilPackage.TIMING_PROTECTION_PARAM: return createTimingProtectionParam();
      case OilPackage.ISR_PARAM: return createIsrParam();
      case OilPackage.MEMORY_PROTECTION_RULE: return createMemoryProtectionRule();
      case OilPackage.IMPLEMENTATION_DEF: return createImplementationDef();
      case OilPackage.IMPL_ATTR_DEF: return createImplAttrDef();
      case OilPackage.IMPL_ATTR_INT_DEF: return createImplAttrIntDef();
      case OilPackage.IMPL_ATTR_FLOAT_DEF: return createImplAttrFloatDef();
      case OilPackage.IMPL_ATTR_ENUM_DEF: return createImplAttrEnumDef();
      case OilPackage.IMPL_ATTR_STRING_DEF: return createImplAttrStringDef();
      case OilPackage.IMPL_ATTR_BOOLEAN_DEF: return createImplAttrBooleanDef();
      case OilPackage.IMPL_ATTR_IDENTI_FIER: return createImplAttrIdentiFier();
      case OilPackage.RANGE: return createRange();
      case OilPackage.ENUMERATION: return createEnumeration();
      case OilPackage.ENUMERATOR: return createEnumerator();
      case OilPackage.IMPL_REF_DEF: return createImplRefDef();
      case OilPackage.APPLICATION_DEFINITION: return createApplicationDefinition();
      case OilPackage.OBJECT_DEFINITION: return createObjectDefinition();
      case OilPackage.LIBRAYATTRIBUTE: return createLibrayattribute();
      case OilPackage.COM_RULE: return createComRule();
      case OilPackage.COMATTRIBUTE: return createComattribute();
      case OilPackage.TASK_RULE: return createTaskRule();
      case OilPackage.TASKATTRIBUTE: return createTaskattribute();
      case OilPackage.TASK_TIMING_ATTRIBUTE: return createTaskTimingAttribute();
      case OilPackage.TASK_AUTOSTART_ATTRIBUTE: return createTaskAutostartAttribute();
      case OilPackage.RESOURCE_RULE: return createResourceRule();
      case OilPackage.RESOURCEATTRIBUTE: return createResourceattribute();
      case OilPackage.ALARM_RULE: return createAlarmRule();
      case OilPackage.ALARM_ATTRIBUTE: return createAlarmAttribute();
      case OilPackage.ALARM_ACTION_ATTRIBUTE: return createAlarmActionAttribute();
      case OilPackage.ALARM_AUTOSTART_ATTRIBUTE: return createAlarmAutostartAttribute();
      case OilPackage.SCHEDULE_TABLE_RULE: return createScheduleTableRule();
      case OilPackage.SCHEDULE_TABLE_ATTRIBUTE: return createScheduleTableAttribute();
      case OilPackage.SCHEDULE_AUTO_START_ATTRIBUTE: return createScheduleAutoStartAttribute();
      case OilPackage.SCHDULE_SYN_ATTRIBUTE: return createSchduleSynAttribute();
      case OilPackage.EXPIRY_ATTRIBUTE: return createExpiryAttribute();
      case OilPackage.SCHDULE_ACTION_ATTRIBUTE: return createSchduleActionAttribute();
      case OilPackage.IOC_RULE: return createIocRule();
      case OilPackage.IOC_ATTRIBUTE: return createIocAttribute();
      case OilPackage.IOC_SENDER: return createIocSender();
      case OilPackage.IOC_RECEIVER: return createIocReceiver();
      case OilPackage.IOC_DATA_TYPE_ATTR: return createIocDataTypeAttr();
      case OilPackage.IOC_SEMANTICS: return createIocSemantics();
      case OilPackage.ATTRIBUTE: return createAttribute();
      case OilPackage.ATTRIBUTE_NAME: return createAttributeName();
      case OilPackage.ATTRIBUTE_VALUE: return createAttributeValue();
      case OilPackage.NAME_ATTRIBUTE_VALUE: return createNameAttributeValue();
      case OilPackage.BOOLEAN_ATTRIBUTE_VALUE: return createBooleanAttributeValue();
      case OilPackage.NUMBER_ATTRIBUTE_VALUE: return createNumberAttributeValue();
      case OilPackage.FLOAT_ATTRIBUTE_VALUE: return createFloatAttributeValue();
      case OilPackage.STRING_ATTRIBUTE_VALUE: return createStringAttributeValue();
      case OilPackage.AUTO_ATTRIBUTE_VALUE: return createAutoAttributeValue();
      case OilPackage.OS_RULE: return createOsRule();
      case OilPackage.COUNTER_RULE: return createCounterRule();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case OilPackage.IMP_TASK_PARAM_ENUM:
        return createImpTaskParamEnumFromString(eDataType, initialValue);
      case OilPackage.IMP_COUNTER_PARAM_ENUM:
        return createImpCounterParamEnumFromString(eDataType, initialValue);
      case OilPackage.APPLICATION_PARAM_ENUM:
        return createApplicationParamEnumFromString(eDataType, initialValue);
      case OilPackage.TIMING_PROTECTION_PARAM_ENUM:
        return createTimingProtectionParamEnumFromString(eDataType, initialValue);
      case OilPackage.ISR_PARAM_ENUM:
        return createIsrParamEnumFromString(eDataType, initialValue);
      case OilPackage.INT_TYPE_ENUM:
        return createIntTypeEnumFromString(eDataType, initialValue);
      case OilPackage.DEFAULT_ENUM:
        return createDefaultEnumFromString(eDataType, initialValue);
      case OilPackage.OBJECT_REF_TYPE_ENUM:
        return createObjectRefTypeEnumFromString(eDataType, initialValue);
      case OilPackage.COM_ATTRIBUTE_NAME:
        return createComAttributeNameFromString(eDataType, initialValue);
      case OilPackage.TASK_TIMINGR_LOCK_ATTRIBUTE:
        return createTaskTimingrLockAttributeFromString(eDataType, initialValue);
      case OilPackage.TASK_TIMING_ATTRIBUTE_NAME:
        return createTaskTimingAttributeNameFromString(eDataType, initialValue);
      case OilPackage.TASK_ATTRIBUTE_NAME:
        return createTaskAttributeNameFromString(eDataType, initialValue);
      case OilPackage.RESOURCE_RANGE:
        return createResourceRangeFromString(eDataType, initialValue);
      case OilPackage.ACTIVATE_TASK:
        return createActivateTaskFromString(eDataType, initialValue);
      case OilPackage.INCREMENT_COUNTER:
        return createIncrementCounterFromString(eDataType, initialValue);
      case OilPackage.SETEVENT:
        return createSeteventFromString(eDataType, initialValue);
      case OilPackage.ALARM_CALL_BACK:
        return createAlarmCallBackFromString(eDataType, initialValue);
      case OilPackage.ABSOLUTE:
        return createAbsoluteFromString(eDataType, initialValue);
      case OilPackage.SCHDULE_SYN:
        return createSchduleSynFromString(eDataType, initialValue);
      case OilPackage.SCHDULE_EXPIRY_ADUSTBLE:
        return createSchduleExpiryAdustbleFromString(eDataType, initialValue);
      case OilPackage.IOC_RECIVER_NONE:
        return createIocReciverNoneFromString(eDataType, initialValue);
      case OilPackage.ENUM_IOC_SEND_REC:
        return createEnumIocSendRecFromString(eDataType, initialValue);
      case OilPackage.ENUM_IOC_REC:
        return createEnumIocRecFromString(eDataType, initialValue);
      case OilPackage.IOC_DATA_TYPE:
        return createIocDataTypeFromString(eDataType, initialValue);
      case OilPackage.IOC_SEMANTICSENUM:
        return createIocSemanticsenumFromString(eDataType, initialValue);
      case OilPackage.IOC_SEMANTICSENUMM:
        return createIocSemanticsenummFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case OilPackage.IMP_TASK_PARAM_ENUM:
        return convertImpTaskParamEnumToString(eDataType, instanceValue);
      case OilPackage.IMP_COUNTER_PARAM_ENUM:
        return convertImpCounterParamEnumToString(eDataType, instanceValue);
      case OilPackage.APPLICATION_PARAM_ENUM:
        return convertApplicationParamEnumToString(eDataType, instanceValue);
      case OilPackage.TIMING_PROTECTION_PARAM_ENUM:
        return convertTimingProtectionParamEnumToString(eDataType, instanceValue);
      case OilPackage.ISR_PARAM_ENUM:
        return convertIsrParamEnumToString(eDataType, instanceValue);
      case OilPackage.INT_TYPE_ENUM:
        return convertIntTypeEnumToString(eDataType, instanceValue);
      case OilPackage.DEFAULT_ENUM:
        return convertDefaultEnumToString(eDataType, instanceValue);
      case OilPackage.OBJECT_REF_TYPE_ENUM:
        return convertObjectRefTypeEnumToString(eDataType, instanceValue);
      case OilPackage.COM_ATTRIBUTE_NAME:
        return convertComAttributeNameToString(eDataType, instanceValue);
      case OilPackage.TASK_TIMINGR_LOCK_ATTRIBUTE:
        return convertTaskTimingrLockAttributeToString(eDataType, instanceValue);
      case OilPackage.TASK_TIMING_ATTRIBUTE_NAME:
        return convertTaskTimingAttributeNameToString(eDataType, instanceValue);
      case OilPackage.TASK_ATTRIBUTE_NAME:
        return convertTaskAttributeNameToString(eDataType, instanceValue);
      case OilPackage.RESOURCE_RANGE:
        return convertResourceRangeToString(eDataType, instanceValue);
      case OilPackage.ACTIVATE_TASK:
        return convertActivateTaskToString(eDataType, instanceValue);
      case OilPackage.INCREMENT_COUNTER:
        return convertIncrementCounterToString(eDataType, instanceValue);
      case OilPackage.SETEVENT:
        return convertSeteventToString(eDataType, instanceValue);
      case OilPackage.ALARM_CALL_BACK:
        return convertAlarmCallBackToString(eDataType, instanceValue);
      case OilPackage.ABSOLUTE:
        return convertAbsoluteToString(eDataType, instanceValue);
      case OilPackage.SCHDULE_SYN:
        return convertSchduleSynToString(eDataType, instanceValue);
      case OilPackage.SCHDULE_EXPIRY_ADUSTBLE:
        return convertSchduleExpiryAdustbleToString(eDataType, instanceValue);
      case OilPackage.IOC_RECIVER_NONE:
        return convertIocReciverNoneToString(eDataType, instanceValue);
      case OilPackage.ENUM_IOC_SEND_REC:
        return convertEnumIocSendRecToString(eDataType, instanceValue);
      case OilPackage.ENUM_IOC_REC:
        return convertEnumIocRecToString(eDataType, instanceValue);
      case OilPackage.IOC_DATA_TYPE:
        return convertIocDataTypeToString(eDataType, instanceValue);
      case OilPackage.IOC_SEMANTICSENUM:
        return convertIocSemanticsenumToString(eDataType, instanceValue);
      case OilPackage.IOC_SEMANTICSENUMM:
        return convertIocSemanticsenummToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OILFile createOILFile()
  {
    OILFileImpl oilFile = new OILFileImpl();
    return oilFile;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Include createInclude()
  {
    IncludeImpl include = new IncludeImpl();
    return include;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OILVersion createOILVersion()
  {
    OILVersionImpl oilVersion = new OILVersionImpl();
    return oilVersion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ImplementationDefinition createImplementationDefinition()
  {
    ImplementationDefinitionImpl implementationDefinition = new ImplementationDefinitionImpl();
    return implementationDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ImplementationSpec createImplementationSpec()
  {
    ImplementationSpecImpl implementationSpec = new ImplementationSpecImpl();
    return implementationSpec;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ImpTaskRule createImpTaskRule()
  {
    ImpTaskRuleImpl impTaskRule = new ImpTaskRuleImpl();
    return impTaskRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ImpTaskParam createImpTaskParam()
  {
    ImpTaskParamImpl impTaskParam = new ImpTaskParamImpl();
    return impTaskParam;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ImpOsRule createImpOsRule()
  {
    ImpOsRuleImpl impOsRule = new ImpOsRuleImpl();
    return impOsRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ImpOsParam createImpOsParam()
  {
    ImpOsParamImpl impOsParam = new ImpOsParamImpl();
    return impOsParam;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ImpCounterRule createImpCounterRule()
  {
    ImpCounterRuleImpl impCounterRule = new ImpCounterRuleImpl();
    return impCounterRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ImpCounterParam createImpCounterParam()
  {
    ImpCounterParamImpl impCounterParam = new ImpCounterParamImpl();
    return impCounterParam;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ApplicationRule createApplicationRule()
  {
    ApplicationRuleImpl applicationRule = new ApplicationRuleImpl();
    return applicationRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AppSubContainer createAppSubContainer()
  {
    AppSubContainerImpl appSubContainer = new AppSubContainerImpl();
    return appSubContainer;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ApplicationParam createApplicationParam()
  {
    ApplicationParamImpl applicationParam = new ApplicationParamImpl();
    return applicationParam;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public HasRestartTaskRule createHasRestartTaskRule()
  {
    HasRestartTaskRuleImpl hasRestartTaskRule = new HasRestartTaskRuleImpl();
    return hasRestartTaskRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RestartTaskRule createRestartTaskRule()
  {
    RestartTaskRuleImpl restartTaskRule = new RestartTaskRuleImpl();
    return restartTaskRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TrustedRule createTrustedRule()
  {
    TrustedRuleImpl trustedRule = new TrustedRuleImpl();
    return trustedRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TrustedFucRule createTrustedFucRule()
  {
    TrustedFucRuleImpl trustedFucRule = new TrustedFucRuleImpl();
    return trustedFucRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IsrRule createIsrRule()
  {
    IsrRuleImpl isrRule = new IsrRuleImpl();
    return isrRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IsrSubContainer createIsrSubContainer()
  {
    IsrSubContainerImpl isrSubContainer = new IsrSubContainerImpl();
    return isrSubContainer;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TimingProtectionRule createTimingProtectionRule()
  {
    TimingProtectionRuleImpl timingProtectionRule = new TimingProtectionRuleImpl();
    return timingProtectionRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TimingProtectionParam createTimingProtectionParam()
  {
    TimingProtectionParamImpl timingProtectionParam = new TimingProtectionParamImpl();
    return timingProtectionParam;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IsrParam createIsrParam()
  {
    IsrParamImpl isrParam = new IsrParamImpl();
    return isrParam;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MemoryProtectionRule createMemoryProtectionRule()
  {
    MemoryProtectionRuleImpl memoryProtectionRule = new MemoryProtectionRuleImpl();
    return memoryProtectionRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ImplementationDef createImplementationDef()
  {
    ImplementationDefImpl implementationDef = new ImplementationDefImpl();
    return implementationDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ImplAttrDef createImplAttrDef()
  {
    ImplAttrDefImpl implAttrDef = new ImplAttrDefImpl();
    return implAttrDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ImplAttrIntDef createImplAttrIntDef()
  {
    ImplAttrIntDefImpl implAttrIntDef = new ImplAttrIntDefImpl();
    return implAttrIntDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ImplAttrFloatDef createImplAttrFloatDef()
  {
    ImplAttrFloatDefImpl implAttrFloatDef = new ImplAttrFloatDefImpl();
    return implAttrFloatDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ImplAttrEnumDef createImplAttrEnumDef()
  {
    ImplAttrEnumDefImpl implAttrEnumDef = new ImplAttrEnumDefImpl();
    return implAttrEnumDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ImplAttrStringDef createImplAttrStringDef()
  {
    ImplAttrStringDefImpl implAttrStringDef = new ImplAttrStringDefImpl();
    return implAttrStringDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ImplAttrBooleanDef createImplAttrBooleanDef()
  {
    ImplAttrBooleanDefImpl implAttrBooleanDef = new ImplAttrBooleanDefImpl();
    return implAttrBooleanDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ImplAttrIdentiFier createImplAttrIdentiFier()
  {
    ImplAttrIdentiFierImpl implAttrIdentiFier = new ImplAttrIdentiFierImpl();
    return implAttrIdentiFier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Range createRange()
  {
    RangeImpl range = new RangeImpl();
    return range;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Enumeration createEnumeration()
  {
    EnumerationImpl enumeration = new EnumerationImpl();
    return enumeration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Enumerator createEnumerator()
  {
    EnumeratorImpl enumerator = new EnumeratorImpl();
    return enumerator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ImplRefDef createImplRefDef()
  {
    ImplRefDefImpl implRefDef = new ImplRefDefImpl();
    return implRefDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ApplicationDefinition createApplicationDefinition()
  {
    ApplicationDefinitionImpl applicationDefinition = new ApplicationDefinitionImpl();
    return applicationDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ObjectDefinition createObjectDefinition()
  {
    ObjectDefinitionImpl objectDefinition = new ObjectDefinitionImpl();
    return objectDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Librayattribute createLibrayattribute()
  {
    LibrayattributeImpl librayattribute = new LibrayattributeImpl();
    return librayattribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ComRule createComRule()
  {
    ComRuleImpl comRule = new ComRuleImpl();
    return comRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Comattribute createComattribute()
  {
    ComattributeImpl comattribute = new ComattributeImpl();
    return comattribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TaskRule createTaskRule()
  {
    TaskRuleImpl taskRule = new TaskRuleImpl();
    return taskRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Taskattribute createTaskattribute()
  {
    TaskattributeImpl taskattribute = new TaskattributeImpl();
    return taskattribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TaskTimingAttribute createTaskTimingAttribute()
  {
    TaskTimingAttributeImpl taskTimingAttribute = new TaskTimingAttributeImpl();
    return taskTimingAttribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TaskAutostartAttribute createTaskAutostartAttribute()
  {
    TaskAutostartAttributeImpl taskAutostartAttribute = new TaskAutostartAttributeImpl();
    return taskAutostartAttribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ResourceRule createResourceRule()
  {
    ResourceRuleImpl resourceRule = new ResourceRuleImpl();
    return resourceRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Resourceattribute createResourceattribute()
  {
    ResourceattributeImpl resourceattribute = new ResourceattributeImpl();
    return resourceattribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AlarmRule createAlarmRule()
  {
    AlarmRuleImpl alarmRule = new AlarmRuleImpl();
    return alarmRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AlarmAttribute createAlarmAttribute()
  {
    AlarmAttributeImpl alarmAttribute = new AlarmAttributeImpl();
    return alarmAttribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AlarmActionAttribute createAlarmActionAttribute()
  {
    AlarmActionAttributeImpl alarmActionAttribute = new AlarmActionAttributeImpl();
    return alarmActionAttribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AlarmAutostartAttribute createAlarmAutostartAttribute()
  {
    AlarmAutostartAttributeImpl alarmAutostartAttribute = new AlarmAutostartAttributeImpl();
    return alarmAutostartAttribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ScheduleTableRule createScheduleTableRule()
  {
    ScheduleTableRuleImpl scheduleTableRule = new ScheduleTableRuleImpl();
    return scheduleTableRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ScheduleTableAttribute createScheduleTableAttribute()
  {
    ScheduleTableAttributeImpl scheduleTableAttribute = new ScheduleTableAttributeImpl();
    return scheduleTableAttribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ScheduleAutoStartAttribute createScheduleAutoStartAttribute()
  {
    ScheduleAutoStartAttributeImpl scheduleAutoStartAttribute = new ScheduleAutoStartAttributeImpl();
    return scheduleAutoStartAttribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SchduleSynAttribute createSchduleSynAttribute()
  {
    SchduleSynAttributeImpl schduleSynAttribute = new SchduleSynAttributeImpl();
    return schduleSynAttribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExpiryAttribute createExpiryAttribute()
  {
    ExpiryAttributeImpl expiryAttribute = new ExpiryAttributeImpl();
    return expiryAttribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SchduleActionAttribute createSchduleActionAttribute()
  {
    SchduleActionAttributeImpl schduleActionAttribute = new SchduleActionAttributeImpl();
    return schduleActionAttribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IocRule createIocRule()
  {
    IocRuleImpl iocRule = new IocRuleImpl();
    return iocRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IocAttribute createIocAttribute()
  {
    IocAttributeImpl iocAttribute = new IocAttributeImpl();
    return iocAttribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IocSender createIocSender()
  {
    IocSenderImpl iocSender = new IocSenderImpl();
    return iocSender;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IocReceiver createIocReceiver()
  {
    IocReceiverImpl iocReceiver = new IocReceiverImpl();
    return iocReceiver;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IocDataTypeAttr createIocDataTypeAttr()
  {
    IocDataTypeAttrImpl iocDataTypeAttr = new IocDataTypeAttrImpl();
    return iocDataTypeAttr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IocSemantics createIocSemantics()
  {
    IocSemanticsImpl iocSemantics = new IocSemanticsImpl();
    return iocSemantics;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Attribute createAttribute()
  {
    AttributeImpl attribute = new AttributeImpl();
    return attribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AttributeName createAttributeName()
  {
    AttributeNameImpl attributeName = new AttributeNameImpl();
    return attributeName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AttributeValue createAttributeValue()
  {
    AttributeValueImpl attributeValue = new AttributeValueImpl();
    return attributeValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NameAttributeValue createNameAttributeValue()
  {
    NameAttributeValueImpl nameAttributeValue = new NameAttributeValueImpl();
    return nameAttributeValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BooleanAttributeValue createBooleanAttributeValue()
  {
    BooleanAttributeValueImpl booleanAttributeValue = new BooleanAttributeValueImpl();
    return booleanAttributeValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NumberAttributeValue createNumberAttributeValue()
  {
    NumberAttributeValueImpl numberAttributeValue = new NumberAttributeValueImpl();
    return numberAttributeValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FloatAttributeValue createFloatAttributeValue()
  {
    FloatAttributeValueImpl floatAttributeValue = new FloatAttributeValueImpl();
    return floatAttributeValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StringAttributeValue createStringAttributeValue()
  {
    StringAttributeValueImpl stringAttributeValue = new StringAttributeValueImpl();
    return stringAttributeValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AutoAttributeValue createAutoAttributeValue()
  {
    AutoAttributeValueImpl autoAttributeValue = new AutoAttributeValueImpl();
    return autoAttributeValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OsRule createOsRule()
  {
    OsRuleImpl osRule = new OsRuleImpl();
    return osRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CounterRule createCounterRule()
  {
    CounterRuleImpl counterRule = new CounterRuleImpl();
    return counterRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ImpTaskParamEnum createImpTaskParamEnumFromString(EDataType eDataType, String initialValue)
  {
    ImpTaskParamEnum result = ImpTaskParamEnum.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertImpTaskParamEnumToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ImpCounterParamEnum createImpCounterParamEnumFromString(EDataType eDataType, String initialValue)
  {
    ImpCounterParamEnum result = ImpCounterParamEnum.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertImpCounterParamEnumToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ApplicationParamEnum createApplicationParamEnumFromString(EDataType eDataType, String initialValue)
  {
    ApplicationParamEnum result = ApplicationParamEnum.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertApplicationParamEnumToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TimingProtectionParamEnum createTimingProtectionParamEnumFromString(EDataType eDataType, String initialValue)
  {
    TimingProtectionParamEnum result = TimingProtectionParamEnum.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertTimingProtectionParamEnumToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IsrParamEnum createIsrParamEnumFromString(EDataType eDataType, String initialValue)
  {
    IsrParamEnum result = IsrParamEnum.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertIsrParamEnumToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IntTypeEnum createIntTypeEnumFromString(EDataType eDataType, String initialValue)
  {
    IntTypeEnum result = IntTypeEnum.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertIntTypeEnumToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DefaultEnum createDefaultEnumFromString(EDataType eDataType, String initialValue)
  {
    DefaultEnum result = DefaultEnum.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertDefaultEnumToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ObjectRefTypeEnum createObjectRefTypeEnumFromString(EDataType eDataType, String initialValue)
  {
    ObjectRefTypeEnum result = ObjectRefTypeEnum.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertObjectRefTypeEnumToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ComAttributeName createComAttributeNameFromString(EDataType eDataType, String initialValue)
  {
    ComAttributeName result = ComAttributeName.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertComAttributeNameToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TaskTimingrLockAttribute createTaskTimingrLockAttributeFromString(EDataType eDataType, String initialValue)
  {
    TaskTimingrLockAttribute result = TaskTimingrLockAttribute.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertTaskTimingrLockAttributeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TaskTimingAttributeName createTaskTimingAttributeNameFromString(EDataType eDataType, String initialValue)
  {
    TaskTimingAttributeName result = TaskTimingAttributeName.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertTaskTimingAttributeNameToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TaskAttributeName createTaskAttributeNameFromString(EDataType eDataType, String initialValue)
  {
    TaskAttributeName result = TaskAttributeName.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertTaskAttributeNameToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ResourceRange createResourceRangeFromString(EDataType eDataType, String initialValue)
  {
    ResourceRange result = ResourceRange.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertResourceRangeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ActivateTask createActivateTaskFromString(EDataType eDataType, String initialValue)
  {
    ActivateTask result = ActivateTask.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertActivateTaskToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IncrementCounter createIncrementCounterFromString(EDataType eDataType, String initialValue)
  {
    IncrementCounter result = IncrementCounter.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertIncrementCounterToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Setevent createSeteventFromString(EDataType eDataType, String initialValue)
  {
    Setevent result = Setevent.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertSeteventToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AlarmCallBack createAlarmCallBackFromString(EDataType eDataType, String initialValue)
  {
    AlarmCallBack result = AlarmCallBack.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertAlarmCallBackToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Absolute createAbsoluteFromString(EDataType eDataType, String initialValue)
  {
    Absolute result = Absolute.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertAbsoluteToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SchduleSyn createSchduleSynFromString(EDataType eDataType, String initialValue)
  {
    SchduleSyn result = SchduleSyn.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertSchduleSynToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SchduleExpiryAdustble createSchduleExpiryAdustbleFromString(EDataType eDataType, String initialValue)
  {
    SchduleExpiryAdustble result = SchduleExpiryAdustble.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertSchduleExpiryAdustbleToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IocReciverNone createIocReciverNoneFromString(EDataType eDataType, String initialValue)
  {
    IocReciverNone result = IocReciverNone.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertIocReciverNoneToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EnumIocSendRec createEnumIocSendRecFromString(EDataType eDataType, String initialValue)
  {
    EnumIocSendRec result = EnumIocSendRec.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertEnumIocSendRecToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EnumIocRec createEnumIocRecFromString(EDataType eDataType, String initialValue)
  {
    EnumIocRec result = EnumIocRec.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertEnumIocRecToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IocDataType createIocDataTypeFromString(EDataType eDataType, String initialValue)
  {
    IocDataType result = IocDataType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertIocDataTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IocSemanticsenum createIocSemanticsenumFromString(EDataType eDataType, String initialValue)
  {
    IocSemanticsenum result = IocSemanticsenum.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertIocSemanticsenumToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IocSemanticsenumm createIocSemanticsenummFromString(EDataType eDataType, String initialValue)
  {
    IocSemanticsenumm result = IocSemanticsenumm.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertIocSemanticsenummToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OilPackage getOilPackage()
  {
    return (OilPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static OilPackage getPackage()
  {
    return OilPackage.eINSTANCE;
  }

} //OilFactoryImpl
