/*
 * generated by Xtext 2.10.0
 */
package org.xtext.example.oil.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.oil.oil.AlarmActionAttribute;
import org.xtext.example.oil.oil.AlarmAttribute;
import org.xtext.example.oil.oil.AlarmAutostartAttribute;
import org.xtext.example.oil.oil.AlarmRule;
import org.xtext.example.oil.oil.AppSubContainer;
import org.xtext.example.oil.oil.ApplicationDefinition;
import org.xtext.example.oil.oil.ApplicationParam;
import org.xtext.example.oil.oil.ApplicationRule;
import org.xtext.example.oil.oil.AppmodeRule;
import org.xtext.example.oil.oil.Attribute;
import org.xtext.example.oil.oil.AttributeName;
import org.xtext.example.oil.oil.AutoAttributeValue;
import org.xtext.example.oil.oil.BooleanAttributeValue;
import org.xtext.example.oil.oil.ComRule;
import org.xtext.example.oil.oil.Comattribute;
import org.xtext.example.oil.oil.CounterRule;
import org.xtext.example.oil.oil.Counterattribute;
import org.xtext.example.oil.oil.CpuOsRule;
import org.xtext.example.oil.oil.Enumeration;
import org.xtext.example.oil.oil.Enumerator;
import org.xtext.example.oil.oil.EventRule;
import org.xtext.example.oil.oil.ExpiryAttribute;
import org.xtext.example.oil.oil.FloatAttributeValue;
import org.xtext.example.oil.oil.HasRestartTaskRule;
import org.xtext.example.oil.oil.ImpCounterParam;
import org.xtext.example.oil.oil.ImpOsParam;
import org.xtext.example.oil.oil.ImpTaskParam;
import org.xtext.example.oil.oil.ImplAttrBooleanDef;
import org.xtext.example.oil.oil.ImplAttrEnumDef;
import org.xtext.example.oil.oil.ImplAttrFloatDef;
import org.xtext.example.oil.oil.ImplAttrIdentiFier;
import org.xtext.example.oil.oil.ImplAttrIntDef;
import org.xtext.example.oil.oil.ImplAttrStringDef;
import org.xtext.example.oil.oil.ImplRefDef;
import org.xtext.example.oil.oil.ImplementationDefinition;
import org.xtext.example.oil.oil.ImplementationSpec;
import org.xtext.example.oil.oil.Include;
import org.xtext.example.oil.oil.IocAttribute;
import org.xtext.example.oil.oil.IocDataTypeAttr;
import org.xtext.example.oil.oil.IocReceiver;
import org.xtext.example.oil.oil.IocRule;
import org.xtext.example.oil.oil.IocSemantics;
import org.xtext.example.oil.oil.IocSender;
import org.xtext.example.oil.oil.IpduParam;
import org.xtext.example.oil.oil.IpduPropParam;
import org.xtext.example.oil.oil.IpduPropSubCon;
import org.xtext.example.oil.oil.IpduPropertyRule;
import org.xtext.example.oil.oil.IpduRule;
import org.xtext.example.oil.oil.IsrParam;
import org.xtext.example.oil.oil.IsrRule;
import org.xtext.example.oil.oil.IsrSubContainer;
import org.xtext.example.oil.oil.Librayattribute;
import org.xtext.example.oil.oil.MemoryProtectionRule;
import org.xtext.example.oil.oil.MessageCDATATYPE;
import org.xtext.example.oil.oil.MessageCOMCALLBACK;
import org.xtext.example.oil.oil.MessageCPUORDERCALLOUT;
import org.xtext.example.oil.oil.MessageINITIALVALUE;
import org.xtext.example.oil.oil.MessageLINK;
import org.xtext.example.oil.oil.MessageNETWORKMESSAGE;
import org.xtext.example.oil.oil.MessageNETWORKORDERCALLOUT;
import org.xtext.example.oil.oil.MessageQUEUESIZE;
import org.xtext.example.oil.oil.MessageRule;
import org.xtext.example.oil.oil.MessageSENDINGMESSAGE;
import org.xtext.example.oil.oil.MessageSETEVENT;
import org.xtext.example.oil.oil.MessageTRANSFERPROPERTY;
import org.xtext.example.oil.oil.Message_RECEIVE_DYNAMIC_EXTERNAL;
import org.xtext.example.oil.oil.Message_RECEIVE_QUEUED_EXTERNAL;
import org.xtext.example.oil.oil.Message_RECEIVE_QUEUED_INTERNAL;
import org.xtext.example.oil.oil.Message_RECEIVE_UNQUEUED_EXTERNAL;
import org.xtext.example.oil.oil.Message_RECEIVE_UNQUEUED_INTERNAL;
import org.xtext.example.oil.oil.Message_RECEIVE_ZERO_EXTERNAL;
import org.xtext.example.oil.oil.Message_RECEIVE_ZERO_INTERNAL;
import org.xtext.example.oil.oil.Message_RECEIVE_ZERO_SENDERS;
import org.xtext.example.oil.oil.Message_SEND_DYNAMIC_EXTERNAL;
import org.xtext.example.oil.oil.Message_SEND_STATIC_EXTERNAL;
import org.xtext.example.oil.oil.Message_SEND_ZERO_EXTERNAL;
import org.xtext.example.oil.oil.Messageattribute;
import org.xtext.example.oil.oil.Messageattribute2;
import org.xtext.example.oil.oil.Messageattribute3;
import org.xtext.example.oil.oil.Messagefilter;
import org.xtext.example.oil.oil.MsgPropertyParam;
import org.xtext.example.oil.oil.NameAttributeValue;
import org.xtext.example.oil.oil.NetworkMessageRule;
import org.xtext.example.oil.oil.NetworkMsgParam;
import org.xtext.example.oil.oil.NetworkMsgPropertyRule;
import org.xtext.example.oil.oil.NumberAttributeValue;
import org.xtext.example.oil.oil.OILFile;
import org.xtext.example.oil.oil.OILVersion;
import org.xtext.example.oil.oil.ObjectDefinition;
import org.xtext.example.oil.oil.OilPackage;
import org.xtext.example.oil.oil.OsAttribute;
import org.xtext.example.oil.oil.OsBuildAttribute;
import org.xtext.example.oil.oil.OsMemmapAttribute;
import org.xtext.example.oil.oil.OsRule;
import org.xtext.example.oil.oil.OsWithortiAttribute;
import org.xtext.example.oil.oil.Range;
import org.xtext.example.oil.oil.ResourceRule;
import org.xtext.example.oil.oil.Resourceattribute;
import org.xtext.example.oil.oil.RestartTaskRule;
import org.xtext.example.oil.oil.SchduleActionAttribute;
import org.xtext.example.oil.oil.SchduleSynAttribute;
import org.xtext.example.oil.oil.ScheduleAutoStartAttribute;
import org.xtext.example.oil.oil.ScheduleTableAttribute;
import org.xtext.example.oil.oil.ScheduleTableRule;
import org.xtext.example.oil.oil.StringAttributeValue;
import org.xtext.example.oil.oil.TaskAutostartAttribute;
import org.xtext.example.oil.oil.TaskRule;
import org.xtext.example.oil.oil.TaskTimingAttribute;
import org.xtext.example.oil.oil.Taskattribute;
import org.xtext.example.oil.oil.TimeAttribute;
import org.xtext.example.oil.oil.TimingProtectionParam;
import org.xtext.example.oil.oil.TimingProtectionRule;
import org.xtext.example.oil.oil.TransmissionModeRule;
import org.xtext.example.oil.oil.TransmissonParam;
import org.xtext.example.oil.oil.TrustedFucRule;
import org.xtext.example.oil.oil.TrustedRule;
import org.xtext.example.oil.services.OilGrammarAccess;

@SuppressWarnings("all")
public class OilSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private OilGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == OilPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case OilPackage.ALARM_ACTION_ATTRIBUTE:
				sequence_AlarmActionAttribute(context, (AlarmActionAttribute) semanticObject); 
				return; 
			case OilPackage.ALARM_ATTRIBUTE:
				sequence_AlarmAttribute(context, (AlarmAttribute) semanticObject); 
				return; 
			case OilPackage.ALARM_AUTOSTART_ATTRIBUTE:
				sequence_AlarmAutostartAttribute(context, (AlarmAutostartAttribute) semanticObject); 
				return; 
			case OilPackage.ALARM_RULE:
				sequence_AlarmRule(context, (AlarmRule) semanticObject); 
				return; 
			case OilPackage.APP_SUB_CONTAINER:
				sequence_AppSubContainer(context, (AppSubContainer) semanticObject); 
				return; 
			case OilPackage.APPLICATION_DEFINITION:
				sequence_ApplicationDefinition(context, (ApplicationDefinition) semanticObject); 
				return; 
			case OilPackage.APPLICATION_PARAM:
				sequence_ApplicationParam(context, (ApplicationParam) semanticObject); 
				return; 
			case OilPackage.APPLICATION_RULE:
				sequence_ApplicationRule(context, (ApplicationRule) semanticObject); 
				return; 
			case OilPackage.APPMODE_RULE:
				sequence_AppmodeRule(context, (AppmodeRule) semanticObject); 
				return; 
			case OilPackage.ATTRIBUTE:
				sequence_Attribute(context, (Attribute) semanticObject); 
				return; 
			case OilPackage.ATTRIBUTE_NAME:
				sequence_AttributeName(context, (AttributeName) semanticObject); 
				return; 
			case OilPackage.AUTO_ATTRIBUTE_VALUE:
				sequence_AutoAttributeValue(context, (AutoAttributeValue) semanticObject); 
				return; 
			case OilPackage.BOOLEAN_ATTRIBUTE_VALUE:
				sequence_BooleanAttributeValue(context, (BooleanAttributeValue) semanticObject); 
				return; 
			case OilPackage.COM_RULE:
				sequence_ComRule(context, (ComRule) semanticObject); 
				return; 
			case OilPackage.COMATTRIBUTE:
				sequence_Comattribute(context, (Comattribute) semanticObject); 
				return; 
			case OilPackage.COUNTER_RULE:
				if (rule == grammarAccess.getObjectDefinitionRule()
						|| rule == grammarAccess.getCounterRuleRule()) {
					sequence_CounterRule(context, (CounterRule) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getImpCounterRuleRule()) {
					sequence_ImpCounterRule(context, (CounterRule) semanticObject); 
					return; 
				}
				else break;
			case OilPackage.COUNTERATTRIBUTE:
				sequence_Counterattribute(context, (Counterattribute) semanticObject); 
				return; 
			case OilPackage.CPU_OS_RULE:
				sequence_CpuOsRule(context, (CpuOsRule) semanticObject); 
				return; 
			case OilPackage.ENUMERATION:
				sequence_Enumeration(context, (Enumeration) semanticObject); 
				return; 
			case OilPackage.ENUMERATOR:
				sequence_Enumerator(context, (Enumerator) semanticObject); 
				return; 
			case OilPackage.EVENT_RULE:
				sequence_EventRule(context, (EventRule) semanticObject); 
				return; 
			case OilPackage.EXPIRY_ATTRIBUTE:
				sequence_ExpiryAttribute(context, (ExpiryAttribute) semanticObject); 
				return; 
			case OilPackage.FLOAT_ATTRIBUTE_VALUE:
				sequence_FloatAttributeValue(context, (FloatAttributeValue) semanticObject); 
				return; 
			case OilPackage.HAS_RESTART_TASK_RULE:
				sequence_HasRestartTaskRule(context, (HasRestartTaskRule) semanticObject); 
				return; 
			case OilPackage.IMP_COUNTER_PARAM:
				sequence_ImpCounterParam(context, (ImpCounterParam) semanticObject); 
				return; 
			case OilPackage.IMP_OS_PARAM:
				sequence_ImpOsParam(context, (ImpOsParam) semanticObject); 
				return; 
			case OilPackage.IMP_TASK_PARAM:
				sequence_ImpTaskParam(context, (ImpTaskParam) semanticObject); 
				return; 
			case OilPackage.IMPL_ATTR_BOOLEAN_DEF:
				sequence_ImplAttrBooleanDef(context, (ImplAttrBooleanDef) semanticObject); 
				return; 
			case OilPackage.IMPL_ATTR_ENUM_DEF:
				sequence_ImplAttrEnumDef(context, (ImplAttrEnumDef) semanticObject); 
				return; 
			case OilPackage.IMPL_ATTR_FLOAT_DEF:
				sequence_ImplAttrFloatDef(context, (ImplAttrFloatDef) semanticObject); 
				return; 
			case OilPackage.IMPL_ATTR_IDENTI_FIER:
				sequence_ImplAttrIdentiFier(context, (ImplAttrIdentiFier) semanticObject); 
				return; 
			case OilPackage.IMPL_ATTR_INT_DEF:
				sequence_ImplAttrIntDef(context, (ImplAttrIntDef) semanticObject); 
				return; 
			case OilPackage.IMPL_ATTR_STRING_DEF:
				sequence_ImplAttrStringDef(context, (ImplAttrStringDef) semanticObject); 
				return; 
			case OilPackage.IMPL_REF_DEF:
				sequence_ImplRefDef(context, (ImplRefDef) semanticObject); 
				return; 
			case OilPackage.IMPLEMENTATION_DEFINITION:
				sequence_ImplementationDefinition(context, (ImplementationDefinition) semanticObject); 
				return; 
			case OilPackage.IMPLEMENTATION_SPEC:
				sequence_ImplementationSpec(context, (ImplementationSpec) semanticObject); 
				return; 
			case OilPackage.INCLUDE:
				sequence_Include(context, (Include) semanticObject); 
				return; 
			case OilPackage.IOC_ATTRIBUTE:
				sequence_IocAttribute(context, (IocAttribute) semanticObject); 
				return; 
			case OilPackage.IOC_DATA_TYPE_ATTR:
				sequence_IocDataTypeAttr(context, (IocDataTypeAttr) semanticObject); 
				return; 
			case OilPackage.IOC_RECEIVER:
				sequence_IocReceiver(context, (IocReceiver) semanticObject); 
				return; 
			case OilPackage.IOC_RULE:
				sequence_IocRule(context, (IocRule) semanticObject); 
				return; 
			case OilPackage.IOC_SEMANTICS:
				sequence_IocSemantics(context, (IocSemantics) semanticObject); 
				return; 
			case OilPackage.IOC_SENDER:
				sequence_IocSender(context, (IocSender) semanticObject); 
				return; 
			case OilPackage.IPDU_PARAM:
				sequence_IpduParam(context, (IpduParam) semanticObject); 
				return; 
			case OilPackage.IPDU_PROP_PARAM:
				sequence_IpduPropParam(context, (IpduPropParam) semanticObject); 
				return; 
			case OilPackage.IPDU_PROP_SUB_CON:
				sequence_IpduPropSubCon(context, (IpduPropSubCon) semanticObject); 
				return; 
			case OilPackage.IPDU_PROPERTY_RULE:
				sequence_IpduPropertyRule(context, (IpduPropertyRule) semanticObject); 
				return; 
			case OilPackage.IPDU_RULE:
				sequence_IpduRule(context, (IpduRule) semanticObject); 
				return; 
			case OilPackage.ISR_PARAM:
				sequence_IsrParam(context, (IsrParam) semanticObject); 
				return; 
			case OilPackage.ISR_RULE:
				sequence_IsrRule(context, (IsrRule) semanticObject); 
				return; 
			case OilPackage.ISR_SUB_CONTAINER:
				sequence_IsrSubContainer(context, (IsrSubContainer) semanticObject); 
				return; 
			case OilPackage.LIBRAYATTRIBUTE:
				sequence_Librayattribute(context, (Librayattribute) semanticObject); 
				return; 
			case OilPackage.MEMORY_PROTECTION_RULE:
				sequence_MemoryProtectionRule(context, (MemoryProtectionRule) semanticObject); 
				return; 
			case OilPackage.MESSAGE_CDATATYPE:
				sequence_MessageCDATATYPE(context, (MessageCDATATYPE) semanticObject); 
				return; 
			case OilPackage.MESSAGE_COMCALLBACK:
				sequence_MessageCOMCALLBACK(context, (MessageCOMCALLBACK) semanticObject); 
				return; 
			case OilPackage.MESSAGE_CPUORDERCALLOUT:
				sequence_MessageCPUORDERCALLOUT(context, (MessageCPUORDERCALLOUT) semanticObject); 
				return; 
			case OilPackage.MESSAGE_INITIALVALUE:
				sequence_MessageINITIALVALUE(context, (MessageINITIALVALUE) semanticObject); 
				return; 
			case OilPackage.MESSAGE_LINK:
				sequence_MessageLINK(context, (MessageLINK) semanticObject); 
				return; 
			case OilPackage.MESSAGE_NETWORKMESSAGE:
				sequence_MessageNETWORKMESSAGE(context, (MessageNETWORKMESSAGE) semanticObject); 
				return; 
			case OilPackage.MESSAGE_NETWORKORDERCALLOUT:
				sequence_MessageNETWORKORDERCALLOUT(context, (MessageNETWORKORDERCALLOUT) semanticObject); 
				return; 
			case OilPackage.MESSAGE_QUEUESIZE:
				sequence_MessageQUEUESIZE(context, (MessageQUEUESIZE) semanticObject); 
				return; 
			case OilPackage.MESSAGE_RULE:
				sequence_MessageRule(context, (MessageRule) semanticObject); 
				return; 
			case OilPackage.MESSAGE_SENDINGMESSAGE:
				sequence_MessageSENDINGMESSAGE(context, (MessageSENDINGMESSAGE) semanticObject); 
				return; 
			case OilPackage.MESSAGE_SETEVENT:
				sequence_MessageSETEVENT(context, (MessageSETEVENT) semanticObject); 
				return; 
			case OilPackage.MESSAGE_TRANSFERPROPERTY:
				sequence_MessageTRANSFERPROPERTY(context, (MessageTRANSFERPROPERTY) semanticObject); 
				return; 
			case OilPackage.MESSAGE_RECEIVE_DYNAMIC_EXTERNAL:
				sequence_Message_RECEIVE_DYNAMIC_EXTERNAL(context, (Message_RECEIVE_DYNAMIC_EXTERNAL) semanticObject); 
				return; 
			case OilPackage.MESSAGE_RECEIVE_QUEUED_EXTERNAL:
				sequence_Message_RECEIVE_QUEUED_EXTERNAL(context, (Message_RECEIVE_QUEUED_EXTERNAL) semanticObject); 
				return; 
			case OilPackage.MESSAGE_RECEIVE_QUEUED_INTERNAL:
				sequence_Message_RECEIVE_QUEUED_INTERNAL(context, (Message_RECEIVE_QUEUED_INTERNAL) semanticObject); 
				return; 
			case OilPackage.MESSAGE_RECEIVE_UNQUEUED_EXTERNAL:
				sequence_Message_RECEIVE_UNQUEUED_EXTERNAL(context, (Message_RECEIVE_UNQUEUED_EXTERNAL) semanticObject); 
				return; 
			case OilPackage.MESSAGE_RECEIVE_UNQUEUED_INTERNAL:
				sequence_Message_RECEIVE_UNQUEUED_INTERNAL(context, (Message_RECEIVE_UNQUEUED_INTERNAL) semanticObject); 
				return; 
			case OilPackage.MESSAGE_RECEIVE_ZERO_EXTERNAL:
				sequence_Message_RECEIVE_ZERO_EXTERNAL(context, (Message_RECEIVE_ZERO_EXTERNAL) semanticObject); 
				return; 
			case OilPackage.MESSAGE_RECEIVE_ZERO_INTERNAL:
				sequence_Message_RECEIVE_ZERO_INTERNAL(context, (Message_RECEIVE_ZERO_INTERNAL) semanticObject); 
				return; 
			case OilPackage.MESSAGE_RECEIVE_ZERO_SENDERS:
				sequence_Message_RECEIVE_ZERO_SENDERS(context, (Message_RECEIVE_ZERO_SENDERS) semanticObject); 
				return; 
			case OilPackage.MESSAGE_SEND_DYNAMIC_EXTERNAL:
				sequence_Message_SEND_DYNAMIC_EXTERNAL(context, (Message_SEND_DYNAMIC_EXTERNAL) semanticObject); 
				return; 
			case OilPackage.MESSAGE_SEND_STATIC_EXTERNAL:
				sequence_Message_SEND_STATIC_EXTERNAL(context, (Message_SEND_STATIC_EXTERNAL) semanticObject); 
				return; 
			case OilPackage.MESSAGE_SEND_ZERO_EXTERNAL:
				sequence_Message_SEND_ZERO_EXTERNAL(context, (Message_SEND_ZERO_EXTERNAL) semanticObject); 
				return; 
			case OilPackage.MESSAGEATTRIBUTE:
				sequence_Messageattribute(context, (Messageattribute) semanticObject); 
				return; 
			case OilPackage.MESSAGEATTRIBUTE2:
				sequence_Messageattribute2(context, (Messageattribute2) semanticObject); 
				return; 
			case OilPackage.MESSAGEATTRIBUTE3:
				sequence_Messageattribute3(context, (Messageattribute3) semanticObject); 
				return; 
			case OilPackage.MESSAGEFILTER:
				sequence_Messagefilter(context, (Messagefilter) semanticObject); 
				return; 
			case OilPackage.MSG_PROPERTY_PARAM:
				sequence_MsgPropertyParam(context, (MsgPropertyParam) semanticObject); 
				return; 
			case OilPackage.NAME_ATTRIBUTE_VALUE:
				sequence_NameAttributeValue(context, (NameAttributeValue) semanticObject); 
				return; 
			case OilPackage.NETWORK_MESSAGE_RULE:
				sequence_NetworkMessageRule(context, (NetworkMessageRule) semanticObject); 
				return; 
			case OilPackage.NETWORK_MSG_PARAM:
				sequence_NetworkMsgParam(context, (NetworkMsgParam) semanticObject); 
				return; 
			case OilPackage.NETWORK_MSG_PROPERTY_RULE:
				sequence_NetworkMsgPropertyRule(context, (NetworkMsgPropertyRule) semanticObject); 
				return; 
			case OilPackage.NUMBER_ATTRIBUTE_VALUE:
				sequence_NumberAttributeValue(context, (NumberAttributeValue) semanticObject); 
				return; 
			case OilPackage.OIL_FILE:
				sequence_OILFile(context, (OILFile) semanticObject); 
				return; 
			case OilPackage.OIL_VERSION:
				sequence_OILVersion(context, (OILVersion) semanticObject); 
				return; 
			case OilPackage.OBJECT_DEFINITION:
				sequence_ObjectDefinition(context, (ObjectDefinition) semanticObject); 
				return; 
			case OilPackage.OS_ATTRIBUTE:
				sequence_OsAttribute(context, (OsAttribute) semanticObject); 
				return; 
			case OilPackage.OS_BUILD_ATTRIBUTE:
				sequence_OsBuildAttribute(context, (OsBuildAttribute) semanticObject); 
				return; 
			case OilPackage.OS_MEMMAP_ATTRIBUTE:
				sequence_OsMemmapAttribute(context, (OsMemmapAttribute) semanticObject); 
				return; 
			case OilPackage.OS_RULE:
				sequence_ImpOsRule(context, (OsRule) semanticObject); 
				return; 
			case OilPackage.OS_WITHORTI_ATTRIBUTE:
				sequence_OsWithortiAttribute(context, (OsWithortiAttribute) semanticObject); 
				return; 
			case OilPackage.RANGE:
				sequence_Range(context, (Range) semanticObject); 
				return; 
			case OilPackage.RESOURCE_RULE:
				sequence_ResourceRule(context, (ResourceRule) semanticObject); 
				return; 
			case OilPackage.RESOURCEATTRIBUTE:
				sequence_Resourceattribute(context, (Resourceattribute) semanticObject); 
				return; 
			case OilPackage.RESTART_TASK_RULE:
				sequence_RestartTaskRule(context, (RestartTaskRule) semanticObject); 
				return; 
			case OilPackage.SCHDULE_ACTION_ATTRIBUTE:
				sequence_SchduleActionAttribute(context, (SchduleActionAttribute) semanticObject); 
				return; 
			case OilPackage.SCHDULE_SYN_ATTRIBUTE:
				sequence_SchduleSynAttribute(context, (SchduleSynAttribute) semanticObject); 
				return; 
			case OilPackage.SCHEDULE_AUTO_START_ATTRIBUTE:
				sequence_ScheduleAutoStartAttribute(context, (ScheduleAutoStartAttribute) semanticObject); 
				return; 
			case OilPackage.SCHEDULE_TABLE_ATTRIBUTE:
				sequence_ScheduleTableAttribute(context, (ScheduleTableAttribute) semanticObject); 
				return; 
			case OilPackage.SCHEDULE_TABLE_RULE:
				sequence_ScheduleTableRule(context, (ScheduleTableRule) semanticObject); 
				return; 
			case OilPackage.STRING_ATTRIBUTE_VALUE:
				sequence_StringAttributeValue(context, (StringAttributeValue) semanticObject); 
				return; 
			case OilPackage.TASK_AUTOSTART_ATTRIBUTE:
				sequence_TaskAutostartAttribute(context, (TaskAutostartAttribute) semanticObject); 
				return; 
			case OilPackage.TASK_RULE:
				if (rule == grammarAccess.getImpTaskRuleRule()) {
					sequence_ImpTaskRule(context, (TaskRule) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getObjectDefinitionRule()
						|| rule == grammarAccess.getTaskRuleRule()) {
					sequence_TaskRule(context, (TaskRule) semanticObject); 
					return; 
				}
				else break;
			case OilPackage.TASK_TIMING_ATTRIBUTE:
				sequence_TaskTimingAttribute(context, (TaskTimingAttribute) semanticObject); 
				return; 
			case OilPackage.TASKATTRIBUTE:
				sequence_Taskattribute(context, (Taskattribute) semanticObject); 
				return; 
			case OilPackage.TIME_ATTRIBUTE:
				sequence_TimeAttribute(context, (TimeAttribute) semanticObject); 
				return; 
			case OilPackage.TIMING_PROTECTION_PARAM:
				sequence_TimingProtectionParam(context, (TimingProtectionParam) semanticObject); 
				return; 
			case OilPackage.TIMING_PROTECTION_RULE:
				sequence_TimingProtectionRule(context, (TimingProtectionRule) semanticObject); 
				return; 
			case OilPackage.TRANSMISSION_MODE_RULE:
				sequence_TransmissionModeRule(context, (TransmissionModeRule) semanticObject); 
				return; 
			case OilPackage.TRANSMISSON_PARAM:
				sequence_TransmissonParam(context, (TransmissonParam) semanticObject); 
				return; 
			case OilPackage.TRUSTED_FUC_RULE:
				sequence_TrustedFucRule(context, (TrustedFucRule) semanticObject); 
				return; 
			case OilPackage.TRUSTED_RULE:
				sequence_TrustedRule(context, (TrustedRule) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     AlarmActionAttribute returns AlarmActionAttribute
	 *
	 * Constraint:
	 *     (
	 *         (activatetask=ActivateTask value=AttributeValue description=EString?) | 
	 *         (incrementcounter=IncrementCounter value=AttributeValue description=EString?) | 
	 *         (setevent=Setevent value=AttributeValue description=EString?) | 
	 *         (alarmcallback=AlarmCallBack value=AttributeValue description=EString?)
	 *     )
	 */
	protected void sequence_AlarmActionAttribute(ISerializationContext context, AlarmActionAttribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AlarmAttribute returns AlarmAttribute
	 *
	 * Constraint:
	 *     (name=Name | name=Name | parameterList+=AlarmActionAttribute | parameterList+=AlarmAutostartAttribute+)
	 */
	protected void sequence_AlarmAttribute(ISerializationContext context, AlarmAttribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AlarmAutostartAttribute returns AlarmAutostartAttribute
	 *
	 * Constraint:
	 *     ((value=AttributeValue description=EString?) | (value=AttributeValue description=EString?) | (value=AttributeValue description=EString?))
	 */
	protected void sequence_AlarmAutostartAttribute(ISerializationContext context, AlarmAutostartAttribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ObjectDefinition returns AlarmRule
	 *     AlarmRule returns AlarmRule
	 *
	 * Constraint:
	 *     (name=Name AlarmList+=AlarmAttribute*)
	 */
	protected void sequence_AlarmRule(ISerializationContext context, AlarmRule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AppSubContainer returns AppSubContainer
	 *
	 * Constraint:
	 *     (hasRestartTaskRule=HasRestartTaskRule | trustedRule=TrustedRule)
	 */
	protected void sequence_AppSubContainer(ISerializationContext context, AppSubContainer semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ApplicationDefinition returns ApplicationDefinition
	 *
	 * Constraint:
	 *     (name=Name objectDefinitionList+=ObjectDefinition* description=EString?)
	 */
	protected void sequence_ApplicationDefinition(ISerializationContext context, ApplicationDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ApplicationParam returns ApplicationParam
	 *
	 * Constraint:
	 *     (type=ApplicationParamEnum value=AttributeValue)
	 */
	protected void sequence_ApplicationParam(ISerializationContext context, ApplicationParam semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, OilPackage.eINSTANCE.getApplicationParam_Type()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OilPackage.eINSTANCE.getApplicationParam_Type()));
			if (transientValues.isValueTransient(semanticObject, OilPackage.eINSTANCE.getApplicationParam_Value()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OilPackage.eINSTANCE.getApplicationParam_Value()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getApplicationParamAccess().getTypeApplicationParamEnumEnumRuleCall_0_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getApplicationParamAccess().getValueAttributeValueParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ApplicationRule returns ApplicationRule
	 *     ObjectDefinition returns ApplicationRule
	 *
	 * Constraint:
	 *     (name=Name? (appSubOrParam+=AppSubContainer | appSubOrParam+=ApplicationParam)*)
	 */
	protected void sequence_ApplicationRule(ISerializationContext context, ApplicationRule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ObjectDefinition returns AppmodeRule
	 *     AppmodeRule returns AppmodeRule
	 *
	 * Constraint:
	 *     name=Name
	 */
	protected void sequence_AppmodeRule(ISerializationContext context, AppmodeRule semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, OilPackage.eINSTANCE.getObjectDefinition_Name()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OilPackage.eINSTANCE.getObjectDefinition_Name()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAppmodeRuleAccess().getNameNameParserRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AttributeName returns AttributeName
	 *
	 * Constraint:
	 *     (value=Name | value=Object)
	 */
	protected void sequence_AttributeName(ISerializationContext context, AttributeName semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Attribute returns Attribute
	 *
	 * Constraint:
	 *     (name=AttributeName value=AttributeValue description=EString?)
	 */
	protected void sequence_Attribute(ISerializationContext context, Attribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AttributeValue returns AutoAttributeValue
	 *     AutoAttributeValue returns AutoAttributeValue
	 *
	 * Constraint:
	 *     value?='AUTO'
	 */
	protected void sequence_AutoAttributeValue(ISerializationContext context, AutoAttributeValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, OilPackage.eINSTANCE.getAutoAttributeValue_Value()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OilPackage.eINSTANCE.getAutoAttributeValue_Value()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAutoAttributeValueAccess().getValueAUTOKeyword_0(), semanticObject.isValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AttributeValue returns BooleanAttributeValue
	 *     BooleanAttributeValue returns BooleanAttributeValue
	 *
	 * Constraint:
	 *     (value=EBoolean parameterList+=Attribute*)
	 */
	protected void sequence_BooleanAttributeValue(ISerializationContext context, BooleanAttributeValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ObjectDefinition returns ComRule
	 *     ComRule returns ComRule
	 *
	 * Constraint:
	 *     (name=Name ComList+=Comattribute* description=EString?)
	 */
	protected void sequence_ComRule(ISerializationContext context, ComRule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Comattribute returns Comattribute
	 *
	 * Constraint:
	 *     (name=ComAttributeName value=AttributeValue description=EString?)
	 */
	protected void sequence_Comattribute(ISerializationContext context, Comattribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ObjectDefinition returns CounterRule
	 *     CounterRule returns CounterRule
	 *
	 * Constraint:
	 *     (name=Name Counterlist+=Counterattribute)
	 */
	protected void sequence_CounterRule(ISerializationContext context, CounterRule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Counterattribute returns Counterattribute
	 *
	 * Constraint:
	 *     (value=T_NUMBER | value=T_NUMBER | value=T_NUMBER | type=Counterenum | sourcevalue=AttributeValue)
	 */
	protected void sequence_Counterattribute(ISerializationContext context, Counterattribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ObjectDefinition returns CpuOsRule
	 *     CpuOsRule returns CpuOsRule
	 *
	 * Constraint:
	 *     (name=Name OsList+=OsAttribute*)
	 */
	protected void sequence_CpuOsRule(ISerializationContext context, CpuOsRule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Enumeration returns Enumeration
	 *
	 * Constraint:
	 *     (list+=Enumerator list+=Enumerator*)
	 */
	protected void sequence_Enumeration(ISerializationContext context, Enumeration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Enumerator returns Enumerator
	 *
	 * Constraint:
	 *     (name=Name implParameterList+=ImplementationDef* description=EString?)
	 */
	protected void sequence_Enumerator(ISerializationContext context, Enumerator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ObjectDefinition returns EventRule
	 *     EventRule returns EventRule
	 *
	 * Constraint:
	 *     (name=Name eventvalue=Name)
	 */
	protected void sequence_EventRule(ISerializationContext context, EventRule semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, OilPackage.eINSTANCE.getObjectDefinition_Name()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OilPackage.eINSTANCE.getObjectDefinition_Name()));
			if (transientValues.isValueTransient(semanticObject, OilPackage.eINSTANCE.getEventRule_Eventvalue()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OilPackage.eINSTANCE.getEventRule_Eventvalue()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEventRuleAccess().getNameNameParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getEventRuleAccess().getEventvalueNameParserRuleCall_5_0(), semanticObject.getEventvalue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ExpiryAttribute returns ExpiryAttribute
	 *
	 * Constraint:
	 *     ((value=AttributeValue description=EString?) | (schdulexpiry=SchduleExpiryAdustble description=EString?) | parameterList+=SchduleActionAttribute)
	 */
	protected void sequence_ExpiryAttribute(ISerializationContext context, ExpiryAttribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AttributeValue returns FloatAttributeValue
	 *     FloatAttributeValue returns FloatAttributeValue
	 *
	 * Constraint:
	 *     value=EFloat
	 */
	protected void sequence_FloatAttributeValue(ISerializationContext context, FloatAttributeValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, OilPackage.eINSTANCE.getFloatAttributeValue_Value()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OilPackage.eINSTANCE.getFloatAttributeValue_Value()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFloatAttributeValueAccess().getValueEFloatParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     HasRestartTaskRule returns HasRestartTaskRule
	 *
	 * Constraint:
	 *     (name=Name? (value='TRUE' | value='FALSE') parameterList+=RestartTaskRule*)
	 */
	protected void sequence_HasRestartTaskRule(ISerializationContext context, HasRestartTaskRule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ImpCounterParam returns ImpCounterParam
	 *
	 * Constraint:
	 *     (type=IntTypeEnum? auto?='WITH_AUTO'? range=Range? param=ImpCounterParamEnum value=AttributeValue)
	 */
	protected void sequence_ImpCounterParam(ISerializationContext context, ImpCounterParam semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ImpCounterRule returns CounterRule
	 *
	 * Constraint:
	 *     (implementations+=ImpCounterParam* description=EString?)
	 */
	protected void sequence_ImpCounterRule(ISerializationContext context, CounterRule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ImpOsParam returns ImpOsParam
	 *
	 * Constraint:
	 *     (auto?='WITH_AUTO'? enumeration=Enumeration? multiple?=MultipleSpecifier? (value=Name | default=DefaultEnum)? description=EString?)
	 */
	protected void sequence_ImpOsParam(ISerializationContext context, ImpOsParam semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ImpOsRule returns OsRule
	 *
	 * Constraint:
	 *     (implementations+=ImpOsParam* description=EString?)
	 */
	protected void sequence_ImpOsRule(ISerializationContext context, OsRule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ImpTaskParam returns ImpTaskParam
	 *
	 * Constraint:
	 *     (
	 *         type=IntTypeEnum? 
	 *         auto?='WITH_AUTO'? 
	 *         range=Range? 
	 *         param=ImpTaskParamEnum 
	 *         multiple?=MultipleSpecifier? 
	 *         (value=Number | default=DefaultEnum)? 
	 *         description=EString?
	 *     )
	 */
	protected void sequence_ImpTaskParam(ISerializationContext context, ImpTaskParam semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ImpTaskRule returns TaskRule
	 *
	 * Constraint:
	 *     (implementations+=ImpTaskParam* description=EString?)
	 */
	protected void sequence_ImpTaskRule(ISerializationContext context, TaskRule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ImplementationDef returns ImplAttrBooleanDef
	 *     ImplAttrDef returns ImplAttrBooleanDef
	 *     ImplAttrBooleanDef returns ImplAttrBooleanDef
	 *
	 * Constraint:
	 *     (
	 *         auto?='WITH_AUTO'? 
	 *         trueParameterList+=ImplementationDef* 
	 *         trueDescription=EString? 
	 *         falseParameterList+=ImplementationDef* 
	 *         falseDescription=EString? 
	 *         (name=Name | name=Object) 
	 *         multiple?=MultipleSpecifier? 
	 *         (value=EBoolean | default=DefaultEnum)? 
	 *         description=EString?
	 *     )
	 */
	protected void sequence_ImplAttrBooleanDef(ISerializationContext context, ImplAttrBooleanDef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ImplementationDef returns ImplAttrEnumDef
	 *     ImplAttrDef returns ImplAttrEnumDef
	 *     ImplAttrEnumDef returns ImplAttrEnumDef
	 *
	 * Constraint:
	 *     (
	 *         auto?='WITH_AUTO'? 
	 *         enumeration=Enumeration? 
	 *         name=AttributeName 
	 *         multiple?=MultipleSpecifier? 
	 *         (value=Name | default=DefaultEnum)? 
	 *         description=EString?
	 *     )
	 */
	protected void sequence_ImplAttrEnumDef(ISerializationContext context, ImplAttrEnumDef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ImplementationDef returns ImplAttrFloatDef
	 *     ImplAttrDef returns ImplAttrFloatDef
	 *     ImplAttrFloatDef returns ImplAttrFloatDef
	 *
	 * Constraint:
	 *     (
	 *         auto?='WITH_AUTO'? 
	 *         range=Range? 
	 *         name=AttributeName 
	 *         multiple?=MultipleSpecifier? 
	 *         (value=EFloat | default=DefaultEnum)? 
	 *         description=EString?
	 *     )
	 */
	protected void sequence_ImplAttrFloatDef(ISerializationContext context, ImplAttrFloatDef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ImplementationDef returns ImplAttrIdentiFier
	 *     ImplAttrDef returns ImplAttrIdentiFier
	 *     ImplAttrIdentiFier returns ImplAttrIdentiFier
	 *
	 * Constraint:
	 *     (auto?='WITH_AUTO'? name=AttributeName value=ID)
	 */
	protected void sequence_ImplAttrIdentiFier(ISerializationContext context, ImplAttrIdentiFier semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ImplementationDef returns ImplAttrIntDef
	 *     ImplAttrDef returns ImplAttrIntDef
	 *     ImplAttrIntDef returns ImplAttrIntDef
	 *
	 * Constraint:
	 *     (
	 *         type=IntTypeEnum 
	 *         auto?='WITH_AUTO'? 
	 *         range=Range? 
	 *         name=AttributeName 
	 *         multiple?=MultipleSpecifier? 
	 *         (value=Number | default=DefaultEnum)? 
	 *         description=EString?
	 *     )
	 */
	protected void sequence_ImplAttrIntDef(ISerializationContext context, ImplAttrIntDef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ImplementationDef returns ImplAttrStringDef
	 *     ImplAttrDef returns ImplAttrStringDef
	 *     ImplAttrStringDef returns ImplAttrStringDef
	 *
	 * Constraint:
	 *     (auto?='WITH_AUTO'? name=AttributeName multiple?=MultipleSpecifier? (value=EString | default=DefaultEnum)? description=EString?)
	 */
	protected void sequence_ImplAttrStringDef(ISerializationContext context, ImplAttrStringDef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ImplementationDef returns ImplRefDef
	 *     ImplRefDef returns ImplRefDef
	 *
	 * Constraint:
	 *     (type=ObjectRefTypeEnum name=AttributeName multiple?=MultipleSpecifier? description=EString?)
	 */
	protected void sequence_ImplRefDef(ISerializationContext context, ImplRefDef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ImplementationDefinition returns ImplementationDefinition
	 *
	 * Constraint:
	 *     (name=Name implementationSpecs+=ImplementationSpec description=EString?)
	 */
	protected void sequence_ImplementationDefinition(ISerializationContext context, ImplementationDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ImplementationSpec returns ImplementationSpec
	 *
	 * Constraint:
	 *     (osRule+=ImpOsRule | counterRule+=ImpCounterRule | isrRule+=IsrRule | taskRule+=ImpTaskRule)*
	 */
	protected void sequence_ImplementationSpec(ISerializationContext context, ImplementationSpec semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Include returns Include
	 *
	 * Constraint:
	 *     (name=FileName | name=STRING)
	 */
	protected void sequence_Include(ISerializationContext context, Include semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IocAttribute returns IocAttribute
	 *
	 * Constraint:
	 *     (
	 *         (name=Name datatypeList+=IocDataTypeAttr*) | 
	 *         (iocsemantics=IocSemantics description=EString?) | 
	 *         (name=Name receiverList+=IocReceiver*) | 
	 *         (name=Name senderList+=IocSender*)
	 *     )
	 */
	protected void sequence_IocAttribute(ISerializationContext context, IocAttribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IocDataTypeAttr returns IocDataTypeAttr
	 *
	 * Constraint:
	 *     iocdatatype=IocDataType
	 */
	protected void sequence_IocDataTypeAttr(ISerializationContext context, IocDataTypeAttr semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, OilPackage.eINSTANCE.getIocDataTypeAttr_Iocdatatype()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OilPackage.eINSTANCE.getIocDataTypeAttr_Iocdatatype()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIocDataTypeAttrAccess().getIocdatatypeIocDataTypeEnumRuleCall_2_0(), semanticObject.getIocdatatype());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     IocReceiver returns IocReceiver
	 *
	 * Constraint:
	 *     (enumioclist+=EnumIocRec (value=AttributeValue | recnone=IocReciverNone) description=EString?)
	 */
	protected void sequence_IocReceiver(ISerializationContext context, IocReceiver semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ObjectDefinition returns IocRule
	 *     IocRule returns IocRule
	 *
	 * Constraint:
	 *     (name=Name ioclist+=IocAttribute*)
	 */
	protected void sequence_IocRule(ISerializationContext context, IocRule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IocSemantics returns IocSemantics
	 *
	 * Constraint:
	 *     ((iocSema=IocSemanticsenum value=AttributeValue description=EString?) | (iocSeman=IocSemanticsenumm value=AttributeValue description=EString?))
	 */
	protected void sequence_IocSemantics(ISerializationContext context, IocSemantics semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IocSender returns IocSender
	 *
	 * Constraint:
	 *     (enumiocsenderlist+=EnumIocSendRec value=AttributeValue description=EString?)
	 */
	protected void sequence_IocSender(ISerializationContext context, IocSender semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IpduParam returns IpduParam
	 *
	 * Constraint:
	 *     (param=IpduParamEnum (value=NumberAttributeValue | value=StringAttributeValue))
	 */
	protected void sequence_IpduParam(ISerializationContext context, IpduParam semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IpduPropParam returns IpduPropParam
	 *
	 * Constraint:
	 *     (param=IpduPropParamEnum value=NumberAttributeValue)
	 */
	protected void sequence_IpduPropParam(ISerializationContext context, IpduPropParam semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, OilPackage.eINSTANCE.getIpduPropParam_Param()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OilPackage.eINSTANCE.getIpduPropParam_Param()));
			if (transientValues.isValueTransient(semanticObject, OilPackage.eINSTANCE.getIpduPropParam_Value()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OilPackage.eINSTANCE.getIpduPropParam_Value()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIpduPropParamAccess().getParamIpduPropParamEnumEnumRuleCall_0_0(), semanticObject.getParam());
		feeder.accept(grammarAccess.getIpduPropParamAccess().getValueNumberAttributeValueParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     IpduPropSubCon returns IpduPropSubCon
	 *
	 * Constraint:
	 *     rule=TransmissionModeRule
	 */
	protected void sequence_IpduPropSubCon(ISerializationContext context, IpduPropSubCon semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, OilPackage.eINSTANCE.getIpduPropSubCon_Rule()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OilPackage.eINSTANCE.getIpduPropSubCon_Rule()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIpduPropSubConAccess().getRuleTransmissionModeRuleParserRuleCall_0(), semanticObject.getRule());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     IpduSubContainer returns IpduPropertyRule
	 *     IpduPropertyRule returns IpduPropertyRule
	 *
	 * Constraint:
	 *     ((value='SENT' | value='RECEIVED') ipduPropSubCon+=IpduPropSubCon? (ipduPropParam+=IpduPropParam? ipduPropSubCon+=IpduPropSubCon?)*)
	 */
	protected void sequence_IpduPropertyRule(ISerializationContext context, IpduPropertyRule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ObjectDefinition returns IpduRule
	 *     IpduRule returns IpduRule
	 *
	 * Constraint:
	 *     (name=Name (value=AttributeValue | (ipduSubContaner+=IpduSubContainer | ipduParam+=IpduParam)+)?)
	 */
	protected void sequence_IpduRule(ISerializationContext context, IpduRule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IsrParam returns IsrParam
	 *
	 * Constraint:
	 *     (type=IntTypeEnum? range=Range? param=IsrParamEnum value=AttributeValue)
	 */
	protected void sequence_IsrParam(ISerializationContext context, IsrParam semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IsrRule returns IsrRule
	 *     ObjectDefinition returns IsrRule
	 *
	 * Constraint:
	 *     (name=Name? (isrParam+=IsrParam | isrSubConainer+=IsrSubContainer)* description=EString?)
	 */
	protected void sequence_IsrRule(ISerializationContext context, IsrRule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IsrSubContainer returns IsrSubContainer
	 *
	 * Constraint:
	 *     timingProtectionRule=TimingProtectionRule
	 */
	protected void sequence_IsrSubContainer(ISerializationContext context, IsrSubContainer semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, OilPackage.eINSTANCE.getIsrSubContainer_TimingProtectionRule()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OilPackage.eINSTANCE.getIsrSubContainer_TimingProtectionRule()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIsrSubContainerAccess().getTimingProtectionRuleTimingProtectionRuleParserRuleCall_0(), semanticObject.getTimingProtectionRule());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Librayattribute returns Librayattribute
	 *
	 * Constraint:
	 *     (description=EString | description=EString | description=EString)
	 */
	protected void sequence_Librayattribute(ISerializationContext context, Librayattribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MemoryProtectionRule returns MemoryProtectionRule
	 *     ObjectDefinition returns MemoryProtectionRule
	 *
	 * Constraint:
	 *     (name=Name? (value='TRUE' | value='FALSE'))
	 */
	protected void sequence_MemoryProtectionRule(ISerializationContext context, MemoryProtectionRule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MessageCDATATYPE returns MessageCDATATYPE
	 *
	 * Constraint:
	 *     descrption=EString
	 */
	protected void sequence_MessageCDATATYPE(ISerializationContext context, MessageCDATATYPE semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, OilPackage.eINSTANCE.getMessageCDATATYPE_Descrption()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OilPackage.eINSTANCE.getMessageCDATATYPE_Descrption()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMessageCDATATYPEAccess().getDescrptionEStringParserRuleCall_3_0(), semanticObject.getDescrption());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MessageCOMCALLBACK returns MessageCOMCALLBACK
	 *
	 * Constraint:
	 *     (description=ID | value=T_NUMBER)
	 */
	protected void sequence_MessageCOMCALLBACK(ISerializationContext context, MessageCOMCALLBACK semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MessageCPUORDERCALLOUT returns MessageCPUORDERCALLOUT
	 *
	 * Constraint:
	 *     descrption=EString
	 */
	protected void sequence_MessageCPUORDERCALLOUT(ISerializationContext context, MessageCPUORDERCALLOUT semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, OilPackage.eINSTANCE.getMessageCPUORDERCALLOUT_Descrption()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OilPackage.eINSTANCE.getMessageCPUORDERCALLOUT_Descrption()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMessageCPUORDERCALLOUTAccess().getDescrptionEStringParserRuleCall_3_0(), semanticObject.getDescrption());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MessageINITIALVALUE returns MessageINITIALVALUE
	 *
	 * Constraint:
	 *     value=T_NUMBER
	 */
	protected void sequence_MessageINITIALVALUE(ISerializationContext context, MessageINITIALVALUE semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, OilPackage.eINSTANCE.getMessageINITIALVALUE_Value()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OilPackage.eINSTANCE.getMessageINITIALVALUE_Value()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMessageINITIALVALUEAccess().getValueT_NUMBERTerminalRuleCall_3_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MessageLINK returns MessageLINK
	 *
	 * Constraint:
	 *     messagelink=Messagelink1
	 */
	protected void sequence_MessageLINK(ISerializationContext context, MessageLINK semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, OilPackage.eINSTANCE.getMessageLINK_Messagelink()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OilPackage.eINSTANCE.getMessageLINK_Messagelink()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMessageLINKAccess().getMessagelinkMessagelink1EnumRuleCall_2_0(), semanticObject.getMessagelink());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MessageNETWORKMESSAGE returns MessageNETWORKMESSAGE
	 *
	 * Constraint:
	 *     value=ImplementationDef
	 */
	protected void sequence_MessageNETWORKMESSAGE(ISerializationContext context, MessageNETWORKMESSAGE semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, OilPackage.eINSTANCE.getMessageNETWORKMESSAGE_Value()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OilPackage.eINSTANCE.getMessageNETWORKMESSAGE_Value()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMessageNETWORKMESSAGEAccess().getValueImplementationDefParserRuleCall_1_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MessageNETWORKORDERCALLOUT returns MessageNETWORKORDERCALLOUT
	 *
	 * Constraint:
	 *     descrption=EString
	 */
	protected void sequence_MessageNETWORKORDERCALLOUT(ISerializationContext context, MessageNETWORKORDERCALLOUT semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, OilPackage.eINSTANCE.getMessageNETWORKORDERCALLOUT_Descrption()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OilPackage.eINSTANCE.getMessageNETWORKORDERCALLOUT_Descrption()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMessageNETWORKORDERCALLOUTAccess().getDescrptionEStringParserRuleCall_3_0(), semanticObject.getDescrption());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MessageQUEUESIZE returns MessageQUEUESIZE
	 *
	 * Constraint:
	 *     value=T_NUMBER
	 */
	protected void sequence_MessageQUEUESIZE(ISerializationContext context, MessageQUEUESIZE semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, OilPackage.eINSTANCE.getMessageQUEUESIZE_Value()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OilPackage.eINSTANCE.getMessageQUEUESIZE_Value()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMessageQUEUESIZEAccess().getValueT_NUMBERTerminalRuleCall_1_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ObjectDefinition returns MessageRule
	 *     MessageRule returns MessageRule
	 *
	 * Constraint:
	 *     (name=Name MessageList+=Messageattribute*)
	 */
	protected void sequence_MessageRule(ISerializationContext context, MessageRule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MessageSENDINGMESSAGE returns MessageSENDINGMESSAGE
	 *
	 * Constraint:
	 *     descrption=ID
	 */
	protected void sequence_MessageSENDINGMESSAGE(ISerializationContext context, MessageSENDINGMESSAGE semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, OilPackage.eINSTANCE.getMessageSENDINGMESSAGE_Descrption()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OilPackage.eINSTANCE.getMessageSENDINGMESSAGE_Descrption()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMessageSENDINGMESSAGEAccess().getDescrptionIDTerminalRuleCall_1_2_0(), semanticObject.getDescrption());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MessageSETEVENT returns MessageSETEVENT
	 *
	 * Constraint:
	 *     (description=ID | description=ID)
	 */
	protected void sequence_MessageSETEVENT(ISerializationContext context, MessageSETEVENT semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MessageTRANSFERPROPERTY returns MessageTRANSFERPROPERTY
	 *
	 * Constraint:
	 *     transenum=MessageTRANSFERPROPERTYenum
	 */
	protected void sequence_MessageTRANSFERPROPERTY(ISerializationContext context, MessageTRANSFERPROPERTY semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, OilPackage.eINSTANCE.getMessageTRANSFERPROPERTY_Transenum()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OilPackage.eINSTANCE.getMessageTRANSFERPROPERTY_Transenum()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMessageTRANSFERPROPERTYAccess().getTransenumMessageTRANSFERPROPERTYenumEnumRuleCall_2_0(), semanticObject.getTransenum());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Message_RECEIVE_DYNAMIC_EXTERNAL returns Message_RECEIVE_DYNAMIC_EXTERNAL
	 *
	 * Constraint:
	 *     (link=MessageLINK | initialvalue=MessageINITIALVALUE)
	 */
	protected void sequence_Message_RECEIVE_DYNAMIC_EXTERNAL(ISerializationContext context, Message_RECEIVE_DYNAMIC_EXTERNAL semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Message_RECEIVE_QUEUED_EXTERNAL returns Message_RECEIVE_QUEUED_EXTERNAL
	 *
	 * Constraint:
	 *     (Cdata=MessageCDATATYPE | queuesize=MessageQUEUESIZE | filter=Messagefilter | link=MessageLINK | initialvalue=MessageINITIALVALUE)
	 */
	protected void sequence_Message_RECEIVE_QUEUED_EXTERNAL(ISerializationContext context, Message_RECEIVE_QUEUED_EXTERNAL semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Message_RECEIVE_QUEUED_INTERNAL returns Message_RECEIVE_QUEUED_INTERNAL
	 *
	 * Constraint:
	 *     (sendingmessage=MessageSENDINGMESSAGE | filter=Messagefilter | initialvalue=MessageINITIALVALUE | queuesize=MessageQUEUESIZE)
	 */
	protected void sequence_Message_RECEIVE_QUEUED_INTERNAL(ISerializationContext context, Message_RECEIVE_QUEUED_INTERNAL semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Message_RECEIVE_UNQUEUED_EXTERNAL returns Message_RECEIVE_UNQUEUED_EXTERNAL
	 *
	 * Constraint:
	 *     (Cdata=MessageCDATATYPE | filter=Messagefilter | link=MessageLINK | initialvalue=MessageINITIALVALUE)
	 */
	protected void sequence_Message_RECEIVE_UNQUEUED_EXTERNAL(ISerializationContext context, Message_RECEIVE_UNQUEUED_EXTERNAL semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Message_RECEIVE_UNQUEUED_INTERNAL returns Message_RECEIVE_UNQUEUED_INTERNAL
	 *
	 * Constraint:
	 *     (sendingmessage=MessageSENDINGMESSAGE | filter=Messagefilter | initialvalue=MessageINITIALVALUE)
	 */
	protected void sequence_Message_RECEIVE_UNQUEUED_INTERNAL(ISerializationContext context, Message_RECEIVE_UNQUEUED_INTERNAL semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Message_RECEIVE_ZERO_EXTERNAL returns Message_RECEIVE_ZERO_EXTERNAL
	 *
	 * Constraint:
	 *     (networkordercallout=MessageNETWORKORDERCALLOUT | cpuordercallout=MessageCPUORDERCALLOUT | networkmessage=MessageNETWORKMESSAGE)
	 */
	protected void sequence_Message_RECEIVE_ZERO_EXTERNAL(ISerializationContext context, Message_RECEIVE_ZERO_EXTERNAL semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Message_RECEIVE_ZERO_INTERNAL returns Message_RECEIVE_ZERO_INTERNAL
	 *
	 * Constraint:
	 *     sendingmessage=MessageSENDINGMESSAGE
	 */
	protected void sequence_Message_RECEIVE_ZERO_INTERNAL(ISerializationContext context, Message_RECEIVE_ZERO_INTERNAL semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, OilPackage.eINSTANCE.getMessage_RECEIVE_ZERO_INTERNAL_Sendingmessage()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OilPackage.eINSTANCE.getMessage_RECEIVE_ZERO_INTERNAL_Sendingmessage()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMessage_RECEIVE_ZERO_INTERNALAccess().getSendingmessageMessageSENDINGMESSAGEParserRuleCall_1_0(), semanticObject.getSendingmessage());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Message_RECEIVE_ZERO_SENDERS returns Message_RECEIVE_ZERO_SENDERS
	 *
	 * Constraint:
	 *     (Cdata=MessageCDATATYPE | initialvalue=MessageINITIALVALUE)
	 */
	protected void sequence_Message_RECEIVE_ZERO_SENDERS(ISerializationContext context, Message_RECEIVE_ZERO_SENDERS semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Message_SEND_DYNAMIC_EXTERNAL returns Message_SEND_DYNAMIC_EXTERNAL
	 *
	 * Constraint:
	 *     (
	 *         Transferproperty=MessageTRANSFERPROPERTY | 
	 *         networkordercallout=MessageNETWORKORDERCALLOUT | 
	 *         cpuordercallout=MessageCPUORDERCALLOUT | 
	 *         initialvalue=MessageINITIALVALUE | 
	 *         networkmessage=MessageNETWORKMESSAGE
	 *     )
	 */
	protected void sequence_Message_SEND_DYNAMIC_EXTERNAL(ISerializationContext context, Message_SEND_DYNAMIC_EXTERNAL semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Message_SEND_STATIC_EXTERNAL returns Message_SEND_STATIC_EXTERNAL
	 *
	 * Constraint:
	 *     (
	 *         Cdata=MessageCDATATYPE | 
	 *         Transferproperty=MessageTRANSFERPROPERTY | 
	 *         filter=Messagefilter | 
	 *         networkordercallout=MessageNETWORKORDERCALLOUT | 
	 *         cpuordercallout=MessageCPUORDERCALLOUT | 
	 *         initialvalue=MessageINITIALVALUE | 
	 *         networkmessage=MessageNETWORKMESSAGE
	 *     )
	 */
	protected void sequence_Message_SEND_STATIC_EXTERNAL(ISerializationContext context, Message_SEND_STATIC_EXTERNAL semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Message_SEND_ZERO_EXTERNAL returns Message_SEND_ZERO_EXTERNAL
	 *
	 * Constraint:
	 *     (networkordercallout=MessageNETWORKORDERCALLOUT | cpuordercallout=MessageCPUORDERCALLOUT | networkmessage=MessageNETWORKMESSAGE)
	 */
	protected void sequence_Message_SEND_ZERO_EXTERNAL(ISerializationContext context, Message_SEND_ZERO_EXTERNAL semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Messageattribute2 returns Messageattribute2
	 *
	 * Constraint:
	 *     (
	 *         Cdata+=MessageCDATATYPE | 
	 *         SSE=Message_SEND_STATIC_EXTERNAL | 
	 *         SDE=Message_SEND_DYNAMIC_EXTERNAL | 
	 *         SZE=Message_SEND_ZERO_EXTERNAL | 
	 *         RZI=Message_RECEIVE_ZERO_INTERNAL | 
	 *         RZE=Message_RECEIVE_ZERO_EXTERNAL | 
	 *         RUI+=Message_RECEIVE_UNQUEUED_INTERNAL+ | 
	 *         RQI=Message_RECEIVE_QUEUED_INTERNAL | 
	 *         RUE=Message_RECEIVE_UNQUEUED_EXTERNAL | 
	 *         RQE=Message_RECEIVE_QUEUED_EXTERNAL | 
	 *         RDE=Message_RECEIVE_DYNAMIC_EXTERNAL | 
	 *         RZS=Message_RECEIVE_ZERO_SENDERS
	 *     )?
	 */
	protected void sequence_Messageattribute2(ISerializationContext context, Messageattribute2 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Messageattribute3 returns Messageattribute3
	 *
	 * Constraint:
	 *     (description=ID | Msetevent+=MessageSETEVENT+ | description=EString | description=EString | Mcomcallback+=MessageCOMCALLBACK)?
	 */
	protected void sequence_Messageattribute3(ISerializationContext context, Messageattribute3 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Messageattribute returns Messageattribute
	 *
	 * Constraint:
	 *     (MessageList2+=Messageattribute2 | MessageList3=Messageattribute3)
	 */
	protected void sequence_Messageattribute(ISerializationContext context, Messageattribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Messagefilter returns Messagefilter
	 *
	 * Constraint:
	 *     (filter2=Messagefilter2 (name=Name messageint1=AttributeValue)*)
	 */
	protected void sequence_Messagefilter(ISerializationContext context, Messagefilter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MsgPropertyParam returns MsgPropertyParam
	 *
	 * Constraint:
	 *     (param=MsgPropertyParamEnum value=AttributeValue description=EString?)
	 */
	protected void sequence_MsgPropertyParam(ISerializationContext context, MsgPropertyParam semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AttributeValue returns NameAttributeValue
	 *     NameAttributeValue returns NameAttributeValue
	 *
	 * Constraint:
	 *     (value=Name parameterList+=Attribute*)
	 */
	protected void sequence_NameAttributeValue(ISerializationContext context, NameAttributeValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ObjectDefinition returns NetworkMessageRule
	 *     NetworkMessageRule returns NetworkMessageRule
	 *
	 * Constraint:
	 *     (name=Name (value=AttributeValue | (networkMsgSub+=NetworkMsgSub | networkMsgParam+=NetworkMsgParam)+)?)
	 */
	protected void sequence_NetworkMessageRule(ISerializationContext context, NetworkMessageRule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NetworkMsgParam returns NetworkMsgParam
	 *
	 * Constraint:
	 *     (param=NetworkMsgParamEnum (value=NumberAttributeValue | value=StringAttributeValue))
	 */
	protected void sequence_NetworkMsgParam(ISerializationContext context, NetworkMsgParam semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NetworkMsgSub returns NetworkMsgPropertyRule
	 *     NetworkMsgPropertyRule returns NetworkMsgPropertyRule
	 *
	 * Constraint:
	 *     ((value='STATIC' | value='DYNAMIC' | value='ZERO') msgPropertyParam+=MsgPropertyParam*)
	 */
	protected void sequence_NetworkMsgPropertyRule(ISerializationContext context, NetworkMsgPropertyRule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AttributeValue returns NumberAttributeValue
	 *     NumberAttributeValue returns NumberAttributeValue
	 *
	 * Constraint:
	 *     value=Number
	 */
	protected void sequence_NumberAttributeValue(ISerializationContext context, NumberAttributeValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, OilPackage.eINSTANCE.getNumberAttributeValue_Value()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OilPackage.eINSTANCE.getNumberAttributeValue_Value()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNumberAttributeValueAccess().getValueNumberParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OILFile returns OILFile
	 *
	 * Constraint:
	 *     (version=OILVersion? include+=Include* implementation=ImplementationDefinition? application=ApplicationDefinition)
	 */
	protected void sequence_OILFile(ISerializationContext context, OILFile semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OILVersion returns OILVersion
	 *
	 * Constraint:
	 *     (value=EString description=EString?)
	 */
	protected void sequence_OILVersion(ISerializationContext context, OILVersion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ObjectDefinition returns ObjectDefinition
	 *
	 * Constraint:
	 *     (name=Name LibraryList+=Librayattribute*)
	 */
	protected void sequence_ObjectDefinition(ISerializationContext context, ObjectDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OsAttribute returns OsAttribute
	 *
	 * Constraint:
	 *     (
	 *         (name=OsAttrubutename value=AttributeValue description=EString?) | 
	 *         parameterList+=OsBuildAttribute+ | 
	 *         parameterList+=OsMemmapAttribute+ | 
	 *         parameterList+=OsWithortiAttribute+ | 
	 *         (style=Name TimeList+=TimeAttribute*)
	 *     )
	 */
	protected void sequence_OsAttribute(ISerializationContext context, OsAttribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OsBuildAttribute returns OsBuildAttribute
	 *
	 * Constraint:
	 *     (
	 *         description=EString | 
	 *         description=EString | 
	 *         description=EString | 
	 *         description=EString | 
	 *         description=EString | 
	 *         description=EString | 
	 *         description=EString | 
	 *         description=EString | 
	 *         description=EString | 
	 *         description=EString | 
	 *         description=EString
	 *     )
	 */
	protected void sequence_OsBuildAttribute(ISerializationContext context, OsBuildAttribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OsMemmapAttribute returns OsMemmapAttribute
	 *
	 * Constraint:
	 *     (description=EString | description=EString | description=EString | description=EString)
	 */
	protected void sequence_OsMemmapAttribute(ISerializationContext context, OsMemmapAttribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OsWithortiAttribute returns OsWithortiAttribute
	 *
	 * Constraint:
	 *     description=EString
	 */
	protected void sequence_OsWithortiAttribute(ISerializationContext context, OsWithortiAttribute semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, OilPackage.eINSTANCE.getOsWithortiAttribute_Description()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OilPackage.eINSTANCE.getOsWithortiAttribute_Description()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOsWithortiAttributeAccess().getDescriptionEStringParserRuleCall_2_0(), semanticObject.getDescription());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Range returns Range
	 *
	 * Constraint:
	 *     (value=Number | (begin=Number end=Number) | (numbers+=Number numbers+=Number+))
	 */
	protected void sequence_Range(ISerializationContext context, Range semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ObjectDefinition returns ResourceRule
	 *     ResourceRule returns ResourceRule
	 *
	 * Constraint:
	 *     (name=Name ResourceList+=Resourceattribute* description=EString?)
	 */
	protected void sequence_ResourceRule(ISerializationContext context, ResourceRule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Resourceattribute returns Resourceattribute
	 *
	 * Constraint:
	 *     resourceRange=ResourceRange
	 */
	protected void sequence_Resourceattribute(ISerializationContext context, Resourceattribute semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, OilPackage.eINSTANCE.getResourceattribute_ResourceRange()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OilPackage.eINSTANCE.getResourceattribute_ResourceRange()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getResourceattributeAccess().getResourceRangeResourceRangeEnumRuleCall_2_0(), semanticObject.getResourceRange());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     RestartTaskRule returns RestartTaskRule
	 *
	 * Constraint:
	 *     (name=Name? value=AttributeValue)
	 */
	protected void sequence_RestartTaskRule(ISerializationContext context, RestartTaskRule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SchduleActionAttribute returns SchduleActionAttribute
	 *
	 * Constraint:
	 *     ((activatetask=ActivateTask value=AttributeValue description=EString?) | (setevent=Setevent value=AttributeValue description=EString?))
	 */
	protected void sequence_SchduleActionAttribute(ISerializationContext context, SchduleActionAttribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SchduleSynAttribute returns SchduleSynAttribute
	 *
	 * Constraint:
	 *     ((value=AttributeValue description=EString?) | (schdulesyn=SchduleSyn description=EString?))
	 */
	protected void sequence_SchduleSynAttribute(ISerializationContext context, SchduleSynAttribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ScheduleAutoStartAttribute returns ScheduleAutoStartAttribute
	 *
	 * Constraint:
	 *     (absolute=Absolute value=AttributeValue description=EString?)+
	 */
	protected void sequence_ScheduleAutoStartAttribute(ISerializationContext context, ScheduleAutoStartAttribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ScheduleTableAttribute returns ScheduleTableAttribute
	 *
	 * Constraint:
	 *     (
	 *         name=Name | 
	 *         name=Name | 
	 *         value=AttributeValue | 
	 *         parameterList+=ScheduleAutoStartAttribute | 
	 *         parameterList+=SchduleSynAttribute+ | 
	 *         (name=Name parameterList+=ExpiryAttribute*)
	 *     )
	 */
	protected void sequence_ScheduleTableAttribute(ISerializationContext context, ScheduleTableAttribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ObjectDefinition returns ScheduleTableRule
	 *     ScheduleTableRule returns ScheduleTableRule
	 *
	 * Constraint:
	 *     (name=Name schedulelist+=ScheduleTableAttribute*)
	 */
	protected void sequence_ScheduleTableRule(ISerializationContext context, ScheduleTableRule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AttributeValue returns StringAttributeValue
	 *     StringAttributeValue returns StringAttributeValue
	 *
	 * Constraint:
	 *     value=EString
	 */
	protected void sequence_StringAttributeValue(ISerializationContext context, StringAttributeValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, OilPackage.eINSTANCE.getStringAttributeValue_Value()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OilPackage.eINSTANCE.getStringAttributeValue_Value()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStringAttributeValueAccess().getValueEStringParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TaskAutostartAttribute returns TaskAutostartAttribute
	 *
	 * Constraint:
	 *     (value=AttributeValue description=EString?)
	 */
	protected void sequence_TaskAutostartAttribute(ISerializationContext context, TaskAutostartAttribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ObjectDefinition returns TaskRule
	 *     TaskRule returns TaskRule
	 *
	 * Constraint:
	 *     (name=Name TaskList+=Taskattribute* description=EString?)
	 */
	protected void sequence_TaskRule(ISerializationContext context, TaskRule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TaskTimingAttribute returns TaskTimingAttribute
	 *
	 * Constraint:
	 *     ((name=TaskTimingAttributeName value=AttributeValue description=EString?) | parameterList+=TaskTimingrLockAttribute+)
	 */
	protected void sequence_TaskTimingAttribute(ISerializationContext context, TaskTimingAttribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Taskattribute returns Taskattribute
	 *
	 * Constraint:
	 *     ((name=TaskAttributeName value=AttributeValue description=EString?) | parameterList+=TaskAutostartAttribute+ | parameterList+=TaskTimingAttribute+)
	 */
	protected void sequence_Taskattribute(ISerializationContext context, Taskattribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TimeAttribute returns TimeAttribute
	 *
	 * Constraint:
	 *     ((value=AttributeValue description=EString?) | (value=AttributeValue description=EString?) | (value=AttributeValue description=EString?))
	 */
	protected void sequence_TimeAttribute(ISerializationContext context, TimeAttribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TimingProtectionParam returns TimingProtectionParam
	 *
	 * Constraint:
	 *     (type=TimingProtectionParamEnum value=AttributeValue)
	 */
	protected void sequence_TimingProtectionParam(ISerializationContext context, TimingProtectionParam semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, OilPackage.eINSTANCE.getTimingProtectionParam_Type()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OilPackage.eINSTANCE.getTimingProtectionParam_Type()));
			if (transientValues.isValueTransient(semanticObject, OilPackage.eINSTANCE.getTimingProtectionParam_Value()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OilPackage.eINSTANCE.getTimingProtectionParam_Value()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTimingProtectionParamAccess().getTypeTimingProtectionParamEnumEnumRuleCall_0_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getTimingProtectionParamAccess().getValueAttributeValueParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TimingProtectionRule returns TimingProtectionRule
	 *
	 * Constraint:
	 *     (name=Name? (value='TRUE' | value='FALSE') timingProtectionParam+=TimingProtectionParam?)
	 */
	protected void sequence_TimingProtectionRule(ISerializationContext context, TimingProtectionRule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TransmissionModeRule returns TransmissionModeRule
	 *
	 * Constraint:
	 *     ((value='PERIORIC' | value='DIRECT' | value='MIXED') transmissionParam+=TransmissonParam*)
	 */
	protected void sequence_TransmissionModeRule(ISerializationContext context, TransmissionModeRule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TransmissonParam returns TransmissonParam
	 *
	 * Constraint:
	 *     (param=TransmissionParamEnum value=NumberAttributeValue)
	 */
	protected void sequence_TransmissonParam(ISerializationContext context, TransmissonParam semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, OilPackage.eINSTANCE.getTransmissonParam_Param()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OilPackage.eINSTANCE.getTransmissonParam_Param()));
			if (transientValues.isValueTransient(semanticObject, OilPackage.eINSTANCE.getTransmissonParam_Value()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OilPackage.eINSTANCE.getTransmissonParam_Value()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTransmissonParamAccess().getParamTransmissionParamEnumEnumRuleCall_0_0(), semanticObject.getParam());
		feeder.accept(grammarAccess.getTransmissonParamAccess().getValueNumberAttributeValueParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TrustedFucRule returns TrustedFucRule
	 *
	 * Constraint:
	 *     (name=Name? value=AttributeValue)
	 */
	protected void sequence_TrustedFucRule(ISerializationContext context, TrustedFucRule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TrustedRule returns TrustedRule
	 *
	 * Constraint:
	 *     (name=Name? (value='TRUE' | value='FALSE') parameterList+=TrustedFucRule?)
	 */
	protected void sequence_TrustedRule(ISerializationContext context, TrustedRule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
