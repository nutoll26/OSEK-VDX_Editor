/*
 * generated by Xtext 2.10.0
 */
package org.xtext.example.oil.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.oil.oil.ApplicationDefinition;
import org.xtext.example.oil.oil.Attribute;
import org.xtext.example.oil.oil.AttributeName;
import org.xtext.example.oil.oil.AutoAttributeValue;
import org.xtext.example.oil.oil.BooleanAttributeValue;
import org.xtext.example.oil.oil.Enumeration;
import org.xtext.example.oil.oil.Enumerator;
import org.xtext.example.oil.oil.FloatAttributeValue;
import org.xtext.example.oil.oil.ImplAttrBooleanDef;
import org.xtext.example.oil.oil.ImplAttrEnumDef;
import org.xtext.example.oil.oil.ImplAttrFloatDef;
import org.xtext.example.oil.oil.ImplAttrIdentiFier;
import org.xtext.example.oil.oil.ImplAttrIntDef;
import org.xtext.example.oil.oil.ImplAttrStringDef;
import org.xtext.example.oil.oil.ImplRefDef;
import org.xtext.example.oil.oil.ImplementationDefinition;
import org.xtext.example.oil.oil.ImplementationSpec;
import org.xtext.example.oil.oil.Include;
import org.xtext.example.oil.oil.NameAttributeValue;
import org.xtext.example.oil.oil.NumberAttributeValue;
import org.xtext.example.oil.oil.OILFile;
import org.xtext.example.oil.oil.OILVersion;
import org.xtext.example.oil.oil.ObjectDefinition;
import org.xtext.example.oil.oil.OilPackage;
import org.xtext.example.oil.oil.Range;
import org.xtext.example.oil.oil.ReObjectDefinition;
import org.xtext.example.oil.oil.StringAttributeValue;
import org.xtext.example.oil.services.OilGrammarAccess;

@SuppressWarnings("all")
public class OilSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private OilGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == OilPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case OilPackage.APPLICATION_DEFINITION:
				sequence_ApplicationDefinition(context, (ApplicationDefinition) semanticObject); 
				return; 
			case OilPackage.ATTRIBUTE:
				sequence_Attribute(context, (Attribute) semanticObject); 
				return; 
			case OilPackage.ATTRIBUTE_NAME:
				sequence_AttributeName(context, (AttributeName) semanticObject); 
				return; 
			case OilPackage.AUTO_ATTRIBUTE_VALUE:
				sequence_AutoAttributeValue(context, (AutoAttributeValue) semanticObject); 
				return; 
			case OilPackage.BOOLEAN_ATTRIBUTE_VALUE:
				sequence_BooleanAttributeValue(context, (BooleanAttributeValue) semanticObject); 
				return; 
			case OilPackage.ENUMERATION:
				sequence_Enumeration(context, (Enumeration) semanticObject); 
				return; 
			case OilPackage.ENUMERATOR:
				sequence_Enumerator(context, (Enumerator) semanticObject); 
				return; 
			case OilPackage.FLOAT_ATTRIBUTE_VALUE:
				sequence_FloatAttributeValue(context, (FloatAttributeValue) semanticObject); 
				return; 
			case OilPackage.IMPL_ATTR_BOOLEAN_DEF:
				sequence_ImplAttrBooleanDef(context, (ImplAttrBooleanDef) semanticObject); 
				return; 
			case OilPackage.IMPL_ATTR_ENUM_DEF:
				sequence_ImplAttrEnumDef(context, (ImplAttrEnumDef) semanticObject); 
				return; 
			case OilPackage.IMPL_ATTR_FLOAT_DEF:
				sequence_ImplAttrFloatDef(context, (ImplAttrFloatDef) semanticObject); 
				return; 
			case OilPackage.IMPL_ATTR_IDENTI_FIER:
				sequence_ImplAttrIdentiFier(context, (ImplAttrIdentiFier) semanticObject); 
				return; 
			case OilPackage.IMPL_ATTR_INT_DEF:
				sequence_ImplAttrIntDef(context, (ImplAttrIntDef) semanticObject); 
				return; 
			case OilPackage.IMPL_ATTR_STRING_DEF:
				sequence_ImplAttrStringDef(context, (ImplAttrStringDef) semanticObject); 
				return; 
			case OilPackage.IMPL_REF_DEF:
				sequence_ImplRefDef(context, (ImplRefDef) semanticObject); 
				return; 
			case OilPackage.IMPLEMENTATION_DEFINITION:
				sequence_ImplementationDefinition(context, (ImplementationDefinition) semanticObject); 
				return; 
			case OilPackage.IMPLEMENTATION_SPEC:
				sequence_ImplementationSpec(context, (ImplementationSpec) semanticObject); 
				return; 
			case OilPackage.INCLUDE:
				sequence_Include(context, (Include) semanticObject); 
				return; 
			case OilPackage.NAME_ATTRIBUTE_VALUE:
				sequence_NameAttributeValue(context, (NameAttributeValue) semanticObject); 
				return; 
			case OilPackage.NUMBER_ATTRIBUTE_VALUE:
				sequence_NumberAttributeValue(context, (NumberAttributeValue) semanticObject); 
				return; 
			case OilPackage.OIL_FILE:
				sequence_OILFile(context, (OILFile) semanticObject); 
				return; 
			case OilPackage.OIL_VERSION:
				sequence_OILVersion(context, (OILVersion) semanticObject); 
				return; 
			case OilPackage.OBJECT_DEFINITION:
				sequence_ObjectDefinition(context, (ObjectDefinition) semanticObject); 
				return; 
			case OilPackage.RANGE:
				sequence_Range(context, (Range) semanticObject); 
				return; 
			case OilPackage.RE_OBJECT_DEFINITION:
				sequence_ReObjectDefinition(context, (ReObjectDefinition) semanticObject); 
				return; 
			case OilPackage.STRING_ATTRIBUTE_VALUE:
				sequence_StringAttributeValue(context, (StringAttributeValue) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     ApplicationDefinition returns ApplicationDefinition
	 *
	 * Constraint:
	 *     (name=Name objectDefinitionList+=ObjectDefinition* description=EString?)
	 */
	protected void sequence_ApplicationDefinition(ISerializationContext context, ApplicationDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AttributeName returns AttributeName
	 *
	 * Constraint:
	 *     (value=Name | value=Object)
	 */
	protected void sequence_AttributeName(ISerializationContext context, AttributeName semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Attribute returns Attribute
	 *
	 * Constraint:
	 *     (name=AttributeName value=AttributeValue description=EString?)
	 */
	protected void sequence_Attribute(ISerializationContext context, Attribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AttributeValue returns AutoAttributeValue
	 *     AutoAttributeValue returns AutoAttributeValue
	 *
	 * Constraint:
	 *     value?='AUTO'
	 */
	protected void sequence_AutoAttributeValue(ISerializationContext context, AutoAttributeValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, OilPackage.Literals.AUTO_ATTRIBUTE_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OilPackage.Literals.AUTO_ATTRIBUTE_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAutoAttributeValueAccess().getValueAUTOKeyword_0(), semanticObject.isValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AttributeValue returns BooleanAttributeValue
	 *     BooleanAttributeValue returns BooleanAttributeValue
	 *
	 * Constraint:
	 *     (value=EBoolean parameterList+=Attribute*)
	 */
	protected void sequence_BooleanAttributeValue(ISerializationContext context, BooleanAttributeValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Enumeration returns Enumeration
	 *
	 * Constraint:
	 *     (list+=Enumerator list+=Enumerator*)
	 */
	protected void sequence_Enumeration(ISerializationContext context, Enumeration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Enumerator returns Enumerator
	 *
	 * Constraint:
	 *     (name=Name implParameterList+=ImplementationDef* description=EString?)
	 */
	protected void sequence_Enumerator(ISerializationContext context, Enumerator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AttributeValue returns FloatAttributeValue
	 *     FloatAttributeValue returns FloatAttributeValue
	 *
	 * Constraint:
	 *     value=EFloat
	 */
	protected void sequence_FloatAttributeValue(ISerializationContext context, FloatAttributeValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, OilPackage.Literals.FLOAT_ATTRIBUTE_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OilPackage.Literals.FLOAT_ATTRIBUTE_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFloatAttributeValueAccess().getValueEFloatParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ImplementationDef returns ImplAttrBooleanDef
	 *     ImplAttrDef returns ImplAttrBooleanDef
	 *     ImplAttrBooleanDef returns ImplAttrBooleanDef
	 *
	 * Constraint:
	 *     (
	 *         auto?='WITH_AUTO'? 
	 *         trueParameterList+=ImplementationDef* 
	 *         trueDescription=EString? 
	 *         falseParameterList+=ImplementationDef* 
	 *         falseDescription=EString? 
	 *         (name=Name | name=Object) 
	 *         multiple?=MultipleSpecifier? 
	 *         (value=EBoolean | default=DefaultEnum)? 
	 *         description=EString?
	 *     )
	 */
	protected void sequence_ImplAttrBooleanDef(ISerializationContext context, ImplAttrBooleanDef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ImplementationDef returns ImplAttrEnumDef
	 *     ImplAttrDef returns ImplAttrEnumDef
	 *     ImplAttrEnumDef returns ImplAttrEnumDef
	 *
	 * Constraint:
	 *     (
	 *         auto?='WITH_AUTO'? 
	 *         enumeration=Enumeration? 
	 *         name=AttributeName 
	 *         multiple?=MultipleSpecifier? 
	 *         (value=Name | default=DefaultEnum)? 
	 *         description=EString?
	 *     )
	 */
	protected void sequence_ImplAttrEnumDef(ISerializationContext context, ImplAttrEnumDef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ImplementationDef returns ImplAttrFloatDef
	 *     ImplAttrDef returns ImplAttrFloatDef
	 *     ImplAttrFloatDef returns ImplAttrFloatDef
	 *
	 * Constraint:
	 *     (
	 *         auto?='WITH_AUTO'? 
	 *         range=Range? 
	 *         name=AttributeName 
	 *         multiple?=MultipleSpecifier? 
	 *         (value=EFloat | default=DefaultEnum)? 
	 *         description=EString?
	 *     )
	 */
	protected void sequence_ImplAttrFloatDef(ISerializationContext context, ImplAttrFloatDef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ImplementationDef returns ImplAttrIdentiFier
	 *     ImplAttrDef returns ImplAttrIdentiFier
	 *     ImplAttrIdentiFier returns ImplAttrIdentiFier
	 *
	 * Constraint:
	 *     (auto?='WITH_AUTO'? name=AttributeName value=ID)
	 */
	protected void sequence_ImplAttrIdentiFier(ISerializationContext context, ImplAttrIdentiFier semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ImplementationDef returns ImplAttrIntDef
	 *     ImplAttrDef returns ImplAttrIntDef
	 *     ImplAttrIntDef returns ImplAttrIntDef
	 *
	 * Constraint:
	 *     (
	 *         type=IntTypeEnum 
	 *         auto?='WITH_AUTO'? 
	 *         range=Range? 
	 *         name=AttributeName 
	 *         multiple?=MultipleSpecifier? 
	 *         (value=Number | default=DefaultEnum)? 
	 *         description=EString?
	 *     )
	 */
	protected void sequence_ImplAttrIntDef(ISerializationContext context, ImplAttrIntDef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ImplementationDef returns ImplAttrStringDef
	 *     ImplAttrDef returns ImplAttrStringDef
	 *     ImplAttrStringDef returns ImplAttrStringDef
	 *
	 * Constraint:
	 *     (auto?='WITH_AUTO'? name=AttributeName multiple?=MultipleSpecifier? (value=EString | default=DefaultEnum)? description=EString?)
	 */
	protected void sequence_ImplAttrStringDef(ISerializationContext context, ImplAttrStringDef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ImplementationDef returns ImplRefDef
	 *     ImplRefDef returns ImplRefDef
	 *
	 * Constraint:
	 *     (type=ObjectRefTypeEnum name=AttributeName multiple?=MultipleSpecifier? description=EString?)
	 */
	protected void sequence_ImplRefDef(ISerializationContext context, ImplRefDef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ImplementationDefinition returns ImplementationDefinition
	 *
	 * Constraint:
	 *     (name=Name implementationSpecs+=ImplementationSpec* description=EString?)
	 */
	protected void sequence_ImplementationDefinition(ISerializationContext context, ImplementationDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ImplementationSpec returns ImplementationSpec
	 *
	 * Constraint:
	 *     (object=Object implementations+=ImplementationDef* description=EString?)
	 */
	protected void sequence_ImplementationSpec(ISerializationContext context, ImplementationSpec semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Include returns Include
	 *
	 * Constraint:
	 *     (name=FILENAME | name=EString)
	 */
	protected void sequence_Include(ISerializationContext context, Include semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AttributeValue returns NameAttributeValue
	 *     NameAttributeValue returns NameAttributeValue
	 *
	 * Constraint:
	 *     (value=Name parameterList+=Attribute*)
	 */
	protected void sequence_NameAttributeValue(ISerializationContext context, NameAttributeValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AttributeValue returns NumberAttributeValue
	 *     NumberAttributeValue returns NumberAttributeValue
	 *
	 * Constraint:
	 *     value=Number
	 */
	protected void sequence_NumberAttributeValue(ISerializationContext context, NumberAttributeValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, OilPackage.Literals.NUMBER_ATTRIBUTE_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OilPackage.Literals.NUMBER_ATTRIBUTE_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNumberAttributeValueAccess().getValueNumberParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OILFile returns OILFile
	 *
	 * Constraint:
	 *     (version=OILVersion? include+=Include* implementation=ImplementationDefinition? application=ApplicationDefinition)
	 */
	protected void sequence_OILFile(ISerializationContext context, OILFile semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OILVersion returns OILVersion
	 *
	 * Constraint:
	 *     (value=EString description=EString?)
	 */
	protected void sequence_OILVersion(ISerializationContext context, OILVersion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ObjectDefinition returns ObjectDefinition
	 *
	 * Constraint:
	 *     (object=Object name=Name parameterList+=Attribute* reObjectDefinition=ReObjectDefinition* descrption=EString?)
	 */
	protected void sequence_ObjectDefinition(ISerializationContext context, ObjectDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Range returns Range
	 *
	 * Constraint:
	 *     (value=Number | (begin=Number end=Number) | (numbers+=Number numbers+=Number+))
	 */
	protected void sequence_Range(ISerializationContext context, Range semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ReObjectDefinition returns ReObjectDefinition
	 *
	 * Constraint:
	 *     (reobject=ReObject name=Name parameterList+=Attribute* descrption=EString?)
	 */
	protected void sequence_ReObjectDefinition(ISerializationContext context, ReObjectDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AttributeValue returns StringAttributeValue
	 *     StringAttributeValue returns StringAttributeValue
	 *
	 * Constraint:
	 *     value=EString
	 */
	protected void sequence_StringAttributeValue(ISerializationContext context, StringAttributeValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, OilPackage.Literals.STRING_ATTRIBUTE_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OilPackage.Literals.STRING_ATTRIBUTE_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStringAttributeValueAccess().getValueEStringParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
}
